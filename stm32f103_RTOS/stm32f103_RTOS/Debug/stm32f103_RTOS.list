
stm32f103_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028cc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e00  20000070  08002c24  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e70  08002c24  00020e70  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001be6b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d37  00000000  00000000  0003bf04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008d8e  00000000  00000000  0003fc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc0  00000000  00000000  000489d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010f0  00000000  00000000  00049790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007cde  00000000  00000000  0004a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050a6  00000000  00000000  0005255e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00057604  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c1c  00000000  00000000  00057680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000070 	.word	0x20000070
 800020c:	00000000 	.word	0x00000000
 8000210:	08002aa4 	.word	0x08002aa4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000074 	.word	0x20000074
 800022c:	08002aa4 	.word	0x08002aa4

08000230 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_Init+0x20>)
{
 8000232:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000236:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000238:	f043 0310 	orr.w	r3, r3, #16
 800023c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800023e:	f000 f81b 	bl	8000278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000242:	2000      	movs	r0, #0
 8000244:	f001 fe56 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000248:	f001 fe28 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800024c:	2000      	movs	r0, #0
 800024e:	bd08      	pop	{r3, pc}
 8000250:	40022000 	.word	0x40022000

08000254 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <HAL_IncTick+0x10>)
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_IncTick+0x14>)
 8000258:	6811      	ldr	r1, [r2, #0]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	440b      	add	r3, r1
 800025e:	6013      	str	r3, [r2, #0]
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000de4 	.word	0x20000de4
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_GetTick+0x8>)
 800026e:	6818      	ldr	r0, [r3, #0]
}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000de4 	.word	0x20000de4

08000278 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800027a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800027e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000286:	041b      	lsls	r3, r3, #16
 8000288:	0c1b      	lsrs	r3, r3, #16
 800028a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800028e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000292:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000294:	60d3      	str	r3, [r2, #12]
 8000296:	4770      	bx	lr
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800029e:	b530      	push	{r4, r5, lr}
 80002a0:	68dc      	ldr	r4, [r3, #12]
 80002a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ac:	2b04      	cmp	r3, #4
 80002ae:	bf28      	it	cs
 80002b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b8:	bf98      	it	ls
 80002ba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	fa05 f303 	lsl.w	r3, r5, r3
 80002c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c4:	bf88      	it	hi
 80002c6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	4019      	ands	r1, r3
 80002ca:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002cc:	fa05 f404 	lsl.w	r4, r5, r4
 80002d0:	3c01      	subs	r4, #1
 80002d2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d6:	ea42 0201 	orr.w	r2, r2, r1
 80002da:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	bfaf      	iteee	ge
 80002e0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	4b06      	ldrlt	r3, [pc, #24]	; (8000300 <HAL_NVIC_SetPriority+0x64>)
 80002e6:	f000 000f 	andlt.w	r0, r0, #15
 80002ea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	bfa5      	ittet	ge
 80002ee:	b2d2      	uxtbge	r2, r2
 80002f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	e000ed00 	.word	0xe000ed00
 8000300:	e000ed14 	.word	0xe000ed14

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	2301      	movs	r3, #1
 8000306:	0942      	lsrs	r2, r0, #5
 8000308:	f000 001f 	and.w	r0, r0, #31
 800030c:	fa03 f000 	lsl.w	r0, r3, r0
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <HAL_NVIC_EnableIRQ+0x14>)
 8000312:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100

0800031c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800031c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000320:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000322:	2b02      	cmp	r3, #2
 8000324:	d003      	beq.n	800032e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000326:	2304      	movs	r3, #4
 8000328:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800032a:	2001      	movs	r0, #1
 800032c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800032e:	6803      	ldr	r3, [r0, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	f022 020e 	bic.w	r2, r2, #14
 8000336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	f022 0201 	bic.w	r2, r2, #1
 800033e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000340:	4a29      	ldr	r2, [pc, #164]	; (80003e8 <HAL_DMA_Abort_IT+0xcc>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d924      	bls.n	8000390 <HAL_DMA_Abort_IT+0x74>
 8000346:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800034a:	4293      	cmp	r3, r2
 800034c:	d019      	beq.n	8000382 <HAL_DMA_Abort_IT+0x66>
 800034e:	3214      	adds	r2, #20
 8000350:	4293      	cmp	r3, r2
 8000352:	d018      	beq.n	8000386 <HAL_DMA_Abort_IT+0x6a>
 8000354:	3214      	adds	r2, #20
 8000356:	4293      	cmp	r3, r2
 8000358:	d017      	beq.n	800038a <HAL_DMA_Abort_IT+0x6e>
 800035a:	3214      	adds	r2, #20
 800035c:	4293      	cmp	r3, r2
 800035e:	bf0c      	ite	eq
 8000360:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000364:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <HAL_DMA_Abort_IT+0xd0>)
 800036a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800036c:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800036e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000370:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000374:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000376:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800037a:	b39b      	cbz	r3, 80003e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800037c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800037e:	4620      	mov	r0, r4
 8000380:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000382:	2301      	movs	r3, #1
 8000384:	e7f0      	b.n	8000368 <HAL_DMA_Abort_IT+0x4c>
 8000386:	2310      	movs	r3, #16
 8000388:	e7ee      	b.n	8000368 <HAL_DMA_Abort_IT+0x4c>
 800038a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038e:	e7eb      	b.n	8000368 <HAL_DMA_Abort_IT+0x4c>
 8000390:	4917      	ldr	r1, [pc, #92]	; (80003f0 <HAL_DMA_Abort_IT+0xd4>)
 8000392:	428b      	cmp	r3, r1
 8000394:	d016      	beq.n	80003c4 <HAL_DMA_Abort_IT+0xa8>
 8000396:	3114      	adds	r1, #20
 8000398:	428b      	cmp	r3, r1
 800039a:	d015      	beq.n	80003c8 <HAL_DMA_Abort_IT+0xac>
 800039c:	3114      	adds	r1, #20
 800039e:	428b      	cmp	r3, r1
 80003a0:	d014      	beq.n	80003cc <HAL_DMA_Abort_IT+0xb0>
 80003a2:	3114      	adds	r1, #20
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d014      	beq.n	80003d2 <HAL_DMA_Abort_IT+0xb6>
 80003a8:	3114      	adds	r1, #20
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d014      	beq.n	80003d8 <HAL_DMA_Abort_IT+0xbc>
 80003ae:	3114      	adds	r1, #20
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d014      	beq.n	80003de <HAL_DMA_Abort_IT+0xc2>
 80003b4:	4293      	cmp	r3, r2
 80003b6:	bf14      	ite	ne
 80003b8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80003bc:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <HAL_DMA_Abort_IT+0xd8>)
 80003c2:	e7d2      	b.n	800036a <HAL_DMA_Abort_IT+0x4e>
 80003c4:	2301      	movs	r3, #1
 80003c6:	e7fb      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
 80003c8:	2310      	movs	r3, #16
 80003ca:	e7f9      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
 80003cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d0:	e7f6      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
 80003d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d6:	e7f3      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
 80003d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003dc:	e7f0      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
 80003de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003e2:	e7ed      	b.n	80003c0 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 80003e4:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80003e6:	bd10      	pop	{r4, pc}
 80003e8:	40020080 	.word	0x40020080
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40020008 	.word	0x40020008
 80003f4:	40020000 	.word	0x40020000

080003f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80003fc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003fe:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000400:	4f6c      	ldr	r7, [pc, #432]	; (80005b4 <HAL_GPIO_Init+0x1bc>)
 8000402:	4b6d      	ldr	r3, [pc, #436]	; (80005b8 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000404:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80005c0 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000408:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80005c4 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 800040c:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000410:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000412:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000416:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800041a:	45a0      	cmp	r8, r4
 800041c:	f040 8085 	bne.w	800052a <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000420:	684d      	ldr	r5, [r1, #4]
 8000422:	2d12      	cmp	r5, #18
 8000424:	f000 80b7 	beq.w	8000596 <HAL_GPIO_Init+0x19e>
 8000428:	f200 808d 	bhi.w	8000546 <HAL_GPIO_Init+0x14e>
 800042c:	2d02      	cmp	r5, #2
 800042e:	f000 80af 	beq.w	8000590 <HAL_GPIO_Init+0x198>
 8000432:	f200 8081 	bhi.w	8000538 <HAL_GPIO_Init+0x140>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 8091 	beq.w	800055e <HAL_GPIO_Init+0x166>
 800043c:	2d01      	cmp	r5, #1
 800043e:	f000 80a5 	beq.w	800058c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000442:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000446:	2cff      	cmp	r4, #255	; 0xff
 8000448:	bf93      	iteet	ls
 800044a:	4682      	movls	sl, r0
 800044c:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000450:	3d08      	subhi	r5, #8
 8000452:	f8d0 b000 	ldrls.w	fp, [r0]
 8000456:	bf92      	itee	ls
 8000458:	00b5      	lslls	r5, r6, #2
 800045a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800045e:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000460:	fa09 f805 	lsl.w	r8, r9, r5
 8000464:	ea2b 0808 	bic.w	r8, fp, r8
 8000468:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800046c:	bf88      	it	hi
 800046e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000472:	ea48 0505 	orr.w	r5, r8, r5
 8000476:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800047a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800047e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000482:	d052      	beq.n	800052a <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000484:	69bd      	ldr	r5, [r7, #24]
 8000486:	f026 0803 	bic.w	r8, r6, #3
 800048a:	f045 0501 	orr.w	r5, r5, #1
 800048e:	61bd      	str	r5, [r7, #24]
 8000490:	69bd      	ldr	r5, [r7, #24]
 8000492:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000496:	f005 0501 	and.w	r5, r5, #1
 800049a:	9501      	str	r5, [sp, #4]
 800049c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004a0:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004a4:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80004aa:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004ae:	fa09 f90b 	lsl.w	r9, r9, fp
 80004b2:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004b6:	4d41      	ldr	r5, [pc, #260]	; (80005bc <HAL_GPIO_Init+0x1c4>)
 80004b8:	42a8      	cmp	r0, r5
 80004ba:	d071      	beq.n	80005a0 <HAL_GPIO_Init+0x1a8>
 80004bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004c0:	42a8      	cmp	r0, r5
 80004c2:	d06f      	beq.n	80005a4 <HAL_GPIO_Init+0x1ac>
 80004c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d06d      	beq.n	80005a8 <HAL_GPIO_Init+0x1b0>
 80004cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004d0:	42a8      	cmp	r0, r5
 80004d2:	d06b      	beq.n	80005ac <HAL_GPIO_Init+0x1b4>
 80004d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004d8:	42a8      	cmp	r0, r5
 80004da:	d069      	beq.n	80005b0 <HAL_GPIO_Init+0x1b8>
 80004dc:	4570      	cmp	r0, lr
 80004de:	bf0c      	ite	eq
 80004e0:	2505      	moveq	r5, #5
 80004e2:	2506      	movne	r5, #6
 80004e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80004e8:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80004ec:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80004f0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004f2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80004f6:	bf14      	ite	ne
 80004f8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004fa:	43a5      	biceq	r5, r4
 80004fc:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80004fe:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000500:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000504:	bf14      	ite	ne
 8000506:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000508:	43a5      	biceq	r5, r4
 800050a:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800050c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800050e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000512:	bf14      	ite	ne
 8000514:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000516:	43a5      	biceq	r5, r4
 8000518:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800051a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800051c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000520:	bf14      	ite	ne
 8000522:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000524:	ea25 0404 	biceq.w	r4, r5, r4
 8000528:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800052a:	3601      	adds	r6, #1
 800052c:	2e10      	cmp	r6, #16
 800052e:	f47f af6d 	bne.w	800040c <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000532:	b003      	add	sp, #12
 8000534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000538:	2d03      	cmp	r5, #3
 800053a:	d025      	beq.n	8000588 <HAL_GPIO_Init+0x190>
 800053c:	2d11      	cmp	r5, #17
 800053e:	d180      	bne.n	8000442 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000540:	68ca      	ldr	r2, [r1, #12]
 8000542:	3204      	adds	r2, #4
          break;
 8000544:	e77d      	b.n	8000442 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000546:	4565      	cmp	r5, ip
 8000548:	d009      	beq.n	800055e <HAL_GPIO_Init+0x166>
 800054a:	d812      	bhi.n	8000572 <HAL_GPIO_Init+0x17a>
 800054c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80005c8 <HAL_GPIO_Init+0x1d0>
 8000550:	454d      	cmp	r5, r9
 8000552:	d004      	beq.n	800055e <HAL_GPIO_Init+0x166>
 8000554:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000558:	454d      	cmp	r5, r9
 800055a:	f47f af72 	bne.w	8000442 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800055e:	688a      	ldr	r2, [r1, #8]
 8000560:	b1e2      	cbz	r2, 800059c <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000562:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000564:	bf0c      	ite	eq
 8000566:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800056a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800056e:	2208      	movs	r2, #8
 8000570:	e767      	b.n	8000442 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000572:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80005cc <HAL_GPIO_Init+0x1d4>
 8000576:	454d      	cmp	r5, r9
 8000578:	d0f1      	beq.n	800055e <HAL_GPIO_Init+0x166>
 800057a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800057e:	454d      	cmp	r5, r9
 8000580:	d0ed      	beq.n	800055e <HAL_GPIO_Init+0x166>
 8000582:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000586:	e7e7      	b.n	8000558 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000588:	2200      	movs	r2, #0
 800058a:	e75a      	b.n	8000442 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800058c:	68ca      	ldr	r2, [r1, #12]
          break;
 800058e:	e758      	b.n	8000442 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000590:	68ca      	ldr	r2, [r1, #12]
 8000592:	3208      	adds	r2, #8
          break;
 8000594:	e755      	b.n	8000442 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000596:	68ca      	ldr	r2, [r1, #12]
 8000598:	320c      	adds	r2, #12
          break;
 800059a:	e752      	b.n	8000442 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800059c:	2204      	movs	r2, #4
 800059e:	e750      	b.n	8000442 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005a0:	2500      	movs	r5, #0
 80005a2:	e79f      	b.n	80004e4 <HAL_GPIO_Init+0xec>
 80005a4:	2501      	movs	r5, #1
 80005a6:	e79d      	b.n	80004e4 <HAL_GPIO_Init+0xec>
 80005a8:	2502      	movs	r5, #2
 80005aa:	e79b      	b.n	80004e4 <HAL_GPIO_Init+0xec>
 80005ac:	2503      	movs	r5, #3
 80005ae:	e799      	b.n	80004e4 <HAL_GPIO_Init+0xec>
 80005b0:	2504      	movs	r5, #4
 80005b2:	e797      	b.n	80004e4 <HAL_GPIO_Init+0xec>
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010400 	.word	0x40010400
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40011c00 	.word	0x40011c00
 80005c4:	10210000 	.word	0x10210000
 80005c8:	10110000 	.word	0x10110000
 80005cc:	10310000 	.word	0x10310000

080005d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80005d0:	b10a      	cbz	r2, 80005d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005d2:	6101      	str	r1, [r0, #16]
 80005d4:	4770      	bx	lr
 80005d6:	0409      	lsls	r1, r1, #16
 80005d8:	e7fb      	b.n	80005d2 <HAL_GPIO_WritePin+0x2>
	...

080005dc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005dc:	6803      	ldr	r3, [r0, #0]
{
 80005de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e2:	07db      	lsls	r3, r3, #31
{
 80005e4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e6:	d410      	bmi.n	800060a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005e8:	682b      	ldr	r3, [r5, #0]
 80005ea:	079f      	lsls	r7, r3, #30
 80005ec:	d45e      	bmi.n	80006ac <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ee:	682b      	ldr	r3, [r5, #0]
 80005f0:	0719      	lsls	r1, r3, #28
 80005f2:	f100 8095 	bmi.w	8000720 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005f6:	682b      	ldr	r3, [r5, #0]
 80005f8:	075a      	lsls	r2, r3, #29
 80005fa:	f100 80bf 	bmi.w	800077c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005fe:	69ea      	ldr	r2, [r5, #28]
 8000600:	2a00      	cmp	r2, #0
 8000602:	f040 812d 	bne.w	8000860 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000606:	2000      	movs	r0, #0
 8000608:	e014      	b.n	8000634 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800060a:	4c90      	ldr	r4, [pc, #576]	; (800084c <HAL_RCC_OscConfig+0x270>)
 800060c:	6863      	ldr	r3, [r4, #4]
 800060e:	f003 030c 	and.w	r3, r3, #12
 8000612:	2b04      	cmp	r3, #4
 8000614:	d007      	beq.n	8000626 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000616:	6863      	ldr	r3, [r4, #4]
 8000618:	f003 030c 	and.w	r3, r3, #12
 800061c:	2b08      	cmp	r3, #8
 800061e:	d10c      	bne.n	800063a <HAL_RCC_OscConfig+0x5e>
 8000620:	6863      	ldr	r3, [r4, #4]
 8000622:	03de      	lsls	r6, r3, #15
 8000624:	d509      	bpl.n	800063a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	039c      	lsls	r4, r3, #14
 800062a:	d5dd      	bpl.n	80005e8 <HAL_RCC_OscConfig+0xc>
 800062c:	686b      	ldr	r3, [r5, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1da      	bne.n	80005e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
}
 8000634:	b002      	add	sp, #8
 8000636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063a:	686b      	ldr	r3, [r5, #4]
 800063c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000640:	d110      	bne.n	8000664 <HAL_RCC_OscConfig+0x88>
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000648:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800064a:	f7ff fe0f 	bl	800026c <HAL_GetTick>
 800064e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	0398      	lsls	r0, r3, #14
 8000654:	d4c8      	bmi.n	80005e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000656:	f7ff fe09 	bl	800026c <HAL_GetTick>
 800065a:	1b80      	subs	r0, r0, r6
 800065c:	2864      	cmp	r0, #100	; 0x64
 800065e:	d9f7      	bls.n	8000650 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000660:	2003      	movs	r0, #3
 8000662:	e7e7      	b.n	8000634 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000664:	b99b      	cbnz	r3, 800068e <HAL_RCC_OscConfig+0xb2>
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066c:	6023      	str	r3, [r4, #0]
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000676:	f7ff fdf9 	bl	800026c <HAL_GetTick>
 800067a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	0399      	lsls	r1, r3, #14
 8000680:	d5b2      	bpl.n	80005e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000682:	f7ff fdf3 	bl	800026c <HAL_GetTick>
 8000686:	1b80      	subs	r0, r0, r6
 8000688:	2864      	cmp	r0, #100	; 0x64
 800068a:	d9f7      	bls.n	800067c <HAL_RCC_OscConfig+0xa0>
 800068c:	e7e8      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800068e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	d103      	bne.n	800069e <HAL_RCC_OscConfig+0xc2>
 8000696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800069a:	6023      	str	r3, [r4, #0]
 800069c:	e7d1      	b.n	8000642 <HAL_RCC_OscConfig+0x66>
 800069e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a2:	6023      	str	r3, [r4, #0]
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006aa:	e7cd      	b.n	8000648 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006ac:	4c67      	ldr	r4, [pc, #412]	; (800084c <HAL_RCC_OscConfig+0x270>)
 80006ae:	6863      	ldr	r3, [r4, #4]
 80006b0:	f013 0f0c 	tst.w	r3, #12
 80006b4:	d007      	beq.n	80006c6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006b6:	6863      	ldr	r3, [r4, #4]
 80006b8:	f003 030c 	and.w	r3, r3, #12
 80006bc:	2b08      	cmp	r3, #8
 80006be:	d110      	bne.n	80006e2 <HAL_RCC_OscConfig+0x106>
 80006c0:	6863      	ldr	r3, [r4, #4]
 80006c2:	03da      	lsls	r2, r3, #15
 80006c4:	d40d      	bmi.n	80006e2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	079b      	lsls	r3, r3, #30
 80006ca:	d502      	bpl.n	80006d2 <HAL_RCC_OscConfig+0xf6>
 80006cc:	692b      	ldr	r3, [r5, #16]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d1af      	bne.n	8000632 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	696a      	ldr	r2, [r5, #20]
 80006d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80006de:	6023      	str	r3, [r4, #0]
 80006e0:	e785      	b.n	80005ee <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006e2:	692a      	ldr	r2, [r5, #16]
 80006e4:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <HAL_RCC_OscConfig+0x274>)
 80006e6:	b16a      	cbz	r2, 8000704 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ec:	f7ff fdbe 	bl	800026c <HAL_GetTick>
 80006f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	079f      	lsls	r7, r3, #30
 80006f6:	d4ec      	bmi.n	80006d2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f8:	f7ff fdb8 	bl	800026c <HAL_GetTick>
 80006fc:	1b80      	subs	r0, r0, r6
 80006fe:	2802      	cmp	r0, #2
 8000700:	d9f7      	bls.n	80006f2 <HAL_RCC_OscConfig+0x116>
 8000702:	e7ad      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000706:	f7ff fdb1 	bl	800026c <HAL_GetTick>
 800070a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	0798      	lsls	r0, r3, #30
 8000710:	f57f af6d 	bpl.w	80005ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000714:	f7ff fdaa 	bl	800026c <HAL_GetTick>
 8000718:	1b80      	subs	r0, r0, r6
 800071a:	2802      	cmp	r0, #2
 800071c:	d9f6      	bls.n	800070c <HAL_RCC_OscConfig+0x130>
 800071e:	e79f      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000720:	69aa      	ldr	r2, [r5, #24]
 8000722:	4c4a      	ldr	r4, [pc, #296]	; (800084c <HAL_RCC_OscConfig+0x270>)
 8000724:	4b4b      	ldr	r3, [pc, #300]	; (8000854 <HAL_RCC_OscConfig+0x278>)
 8000726:	b1da      	cbz	r2, 8000760 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800072c:	f7ff fd9e 	bl	800026c <HAL_GetTick>
 8000730:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000734:	079b      	lsls	r3, r3, #30
 8000736:	d50d      	bpl.n	8000754 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000738:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <HAL_RCC_OscConfig+0x27c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	fbb3 f3f2 	udiv	r3, r3, r2
 8000744:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000746:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000748:	9b01      	ldr	r3, [sp, #4]
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	9201      	str	r2, [sp, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f9      	bne.n	8000746 <HAL_RCC_OscConfig+0x16a>
 8000752:	e750      	b.n	80005f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000754:	f7ff fd8a 	bl	800026c <HAL_GetTick>
 8000758:	1b80      	subs	r0, r0, r6
 800075a:	2802      	cmp	r0, #2
 800075c:	d9e9      	bls.n	8000732 <HAL_RCC_OscConfig+0x156>
 800075e:	e77f      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000760:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000762:	f7ff fd83 	bl	800026c <HAL_GetTick>
 8000766:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800076a:	079f      	lsls	r7, r3, #30
 800076c:	f57f af43 	bpl.w	80005f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000770:	f7ff fd7c 	bl	800026c <HAL_GetTick>
 8000774:	1b80      	subs	r0, r0, r6
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f6      	bls.n	8000768 <HAL_RCC_OscConfig+0x18c>
 800077a:	e771      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800077c:	4c33      	ldr	r4, [pc, #204]	; (800084c <HAL_RCC_OscConfig+0x270>)
 800077e:	69e3      	ldr	r3, [r4, #28]
 8000780:	00d8      	lsls	r0, r3, #3
 8000782:	d424      	bmi.n	80007ce <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000784:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	69e3      	ldr	r3, [r4, #28]
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61e3      	str	r3, [r4, #28]
 800078e:	69e3      	ldr	r3, [r4, #28]
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000798:	4e30      	ldr	r6, [pc, #192]	; (800085c <HAL_RCC_OscConfig+0x280>)
 800079a:	6833      	ldr	r3, [r6, #0]
 800079c:	05d9      	lsls	r1, r3, #23
 800079e:	d518      	bpl.n	80007d2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	68eb      	ldr	r3, [r5, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d126      	bne.n	80007f4 <HAL_RCC_OscConfig+0x218>
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ae:	f7ff fd5d 	bl	800026c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007b6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007b8:	6a23      	ldr	r3, [r4, #32]
 80007ba:	079b      	lsls	r3, r3, #30
 80007bc:	d53f      	bpl.n	800083e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80007be:	2f00      	cmp	r7, #0
 80007c0:	f43f af1d 	beq.w	80005fe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007c4:	69e3      	ldr	r3, [r4, #28]
 80007c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ca:	61e3      	str	r3, [r4, #28]
 80007cc:	e717      	b.n	80005fe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80007ce:	2700      	movs	r7, #0
 80007d0:	e7e2      	b.n	8000798 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007d2:	6833      	ldr	r3, [r6, #0]
 80007d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007da:	f7ff fd47 	bl	800026c <HAL_GetTick>
 80007de:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007e0:	6833      	ldr	r3, [r6, #0]
 80007e2:	05da      	lsls	r2, r3, #23
 80007e4:	d4dc      	bmi.n	80007a0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007e6:	f7ff fd41 	bl	800026c <HAL_GetTick>
 80007ea:	eba0 0008 	sub.w	r0, r0, r8
 80007ee:	2864      	cmp	r0, #100	; 0x64
 80007f0:	d9f6      	bls.n	80007e0 <HAL_RCC_OscConfig+0x204>
 80007f2:	e735      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f4:	b9ab      	cbnz	r3, 8000822 <HAL_RCC_OscConfig+0x246>
 80007f6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	6223      	str	r3, [r4, #32]
 8000802:	6a23      	ldr	r3, [r4, #32]
 8000804:	f023 0304 	bic.w	r3, r3, #4
 8000808:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800080a:	f7ff fd2f 	bl	800026c <HAL_GetTick>
 800080e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000810:	6a23      	ldr	r3, [r4, #32]
 8000812:	0798      	lsls	r0, r3, #30
 8000814:	d5d3      	bpl.n	80007be <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000816:	f7ff fd29 	bl	800026c <HAL_GetTick>
 800081a:	1b80      	subs	r0, r0, r6
 800081c:	4540      	cmp	r0, r8
 800081e:	d9f7      	bls.n	8000810 <HAL_RCC_OscConfig+0x234>
 8000820:	e71e      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000822:	2b05      	cmp	r3, #5
 8000824:	6a23      	ldr	r3, [r4, #32]
 8000826:	d103      	bne.n	8000830 <HAL_RCC_OscConfig+0x254>
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6223      	str	r3, [r4, #32]
 800082e:	e7ba      	b.n	80007a6 <HAL_RCC_OscConfig+0x1ca>
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	6223      	str	r3, [r4, #32]
 8000836:	6a23      	ldr	r3, [r4, #32]
 8000838:	f023 0304 	bic.w	r3, r3, #4
 800083c:	e7b6      	b.n	80007ac <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800083e:	f7ff fd15 	bl	800026c <HAL_GetTick>
 8000842:	eba0 0008 	sub.w	r0, r0, r8
 8000846:	42b0      	cmp	r0, r6
 8000848:	d9b6      	bls.n	80007b8 <HAL_RCC_OscConfig+0x1dc>
 800084a:	e709      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
 800084c:	40021000 	.word	0x40021000
 8000850:	42420000 	.word	0x42420000
 8000854:	42420480 	.word	0x42420480
 8000858:	20000008 	.word	0x20000008
 800085c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000860:	4c22      	ldr	r4, [pc, #136]	; (80008ec <HAL_RCC_OscConfig+0x310>)
 8000862:	6863      	ldr	r3, [r4, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b08      	cmp	r3, #8
 800086a:	f43f aee2 	beq.w	8000632 <HAL_RCC_OscConfig+0x56>
 800086e:	2300      	movs	r3, #0
 8000870:	4e1f      	ldr	r6, [pc, #124]	; (80008f0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000872:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000874:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000876:	d12b      	bne.n	80008d0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000878:	f7ff fcf8 	bl	800026c <HAL_GetTick>
 800087c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	0199      	lsls	r1, r3, #6
 8000882:	d41f      	bmi.n	80008c4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000884:	6a2b      	ldr	r3, [r5, #32]
 8000886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800088a:	d105      	bne.n	8000898 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800088c:	6862      	ldr	r2, [r4, #4]
 800088e:	68a9      	ldr	r1, [r5, #8]
 8000890:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000894:	430a      	orrs	r2, r1
 8000896:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000898:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800089a:	6862      	ldr	r2, [r4, #4]
 800089c:	430b      	orrs	r3, r1
 800089e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008a2:	4313      	orrs	r3, r2
 80008a4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80008a6:	2301      	movs	r3, #1
 80008a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80008aa:	f7ff fcdf 	bl	800026c <HAL_GetTick>
 80008ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	019a      	lsls	r2, r3, #6
 80008b4:	f53f aea7 	bmi.w	8000606 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008b8:	f7ff fcd8 	bl	800026c <HAL_GetTick>
 80008bc:	1b40      	subs	r0, r0, r5
 80008be:	2802      	cmp	r0, #2
 80008c0:	d9f6      	bls.n	80008b0 <HAL_RCC_OscConfig+0x2d4>
 80008c2:	e6cd      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008c4:	f7ff fcd2 	bl	800026c <HAL_GetTick>
 80008c8:	1bc0      	subs	r0, r0, r7
 80008ca:	2802      	cmp	r0, #2
 80008cc:	d9d7      	bls.n	800087e <HAL_RCC_OscConfig+0x2a2>
 80008ce:	e6c7      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80008d0:	f7ff fccc 	bl	800026c <HAL_GetTick>
 80008d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d6:	6823      	ldr	r3, [r4, #0]
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	f57f ae94 	bpl.w	8000606 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008de:	f7ff fcc5 	bl	800026c <HAL_GetTick>
 80008e2:	1b40      	subs	r0, r0, r5
 80008e4:	2802      	cmp	r0, #2
 80008e6:	d9f6      	bls.n	80008d6 <HAL_RCC_OscConfig+0x2fa>
 80008e8:	e6ba      	b.n	8000660 <HAL_RCC_OscConfig+0x84>
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	42420060 	.word	0x42420060

080008f4 <HAL_RCC_GetSysClockFreq>:
{
 80008f4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80008f8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008fa:	ac02      	add	r4, sp, #8
 80008fc:	f103 0510 	add.w	r5, r3, #16
 8000900:	4622      	mov	r2, r4
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	6859      	ldr	r1, [r3, #4]
 8000906:	3308      	adds	r3, #8
 8000908:	c203      	stmia	r2!, {r0, r1}
 800090a:	42ab      	cmp	r3, r5
 800090c:	4614      	mov	r4, r2
 800090e:	d1f7      	bne.n	8000900 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000910:	2301      	movs	r3, #1
 8000912:	f88d 3004 	strb.w	r3, [sp, #4]
 8000916:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000918:	4911      	ldr	r1, [pc, #68]	; (8000960 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800091a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800091e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000920:	f003 020c 	and.w	r2, r3, #12
 8000924:	2a08      	cmp	r2, #8
 8000926:	d117      	bne.n	8000958 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000928:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800092c:	a806      	add	r0, sp, #24
 800092e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000930:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000932:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000936:	d50c      	bpl.n	8000952 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000938:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800093c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000940:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000942:	aa06      	add	r2, sp, #24
 8000944:	4413      	add	r3, r2
 8000946:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800094a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800094e:	b007      	add	sp, #28
 8000950:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_RCC_GetSysClockFreq+0x74>)
 8000954:	4350      	muls	r0, r2
 8000956:	e7fa      	b.n	800094e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800095a:	e7f8      	b.n	800094e <HAL_RCC_GetSysClockFreq+0x5a>
 800095c:	08002abc 	.word	0x08002abc
 8000960:	40021000 	.word	0x40021000
 8000964:	007a1200 	.word	0x007a1200
 8000968:	003d0900 	.word	0x003d0900

0800096c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800096c:	4a54      	ldr	r2, [pc, #336]	; (8000ac0 <HAL_RCC_ClockConfig+0x154>)
{
 800096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000972:	6813      	ldr	r3, [r2, #0]
{
 8000974:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	428b      	cmp	r3, r1
{
 800097c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800097e:	d32a      	bcc.n	80009d6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000980:	6829      	ldr	r1, [r5, #0]
 8000982:	078c      	lsls	r4, r1, #30
 8000984:	d434      	bmi.n	80009f0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000986:	07ca      	lsls	r2, r1, #31
 8000988:	d447      	bmi.n	8000a1a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800098a:	4a4d      	ldr	r2, [pc, #308]	; (8000ac0 <HAL_RCC_ClockConfig+0x154>)
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	429e      	cmp	r6, r3
 8000994:	f0c0 8082 	bcc.w	8000a9c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000998:	682a      	ldr	r2, [r5, #0]
 800099a:	4c4a      	ldr	r4, [pc, #296]	; (8000ac4 <HAL_RCC_ClockConfig+0x158>)
 800099c:	f012 0f04 	tst.w	r2, #4
 80009a0:	f040 8087 	bne.w	8000ab2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009a4:	0713      	lsls	r3, r2, #28
 80009a6:	d506      	bpl.n	80009b6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80009a8:	6863      	ldr	r3, [r4, #4]
 80009aa:	692a      	ldr	r2, [r5, #16]
 80009ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009b4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80009b6:	f7ff ff9d 	bl	80008f4 <HAL_RCC_GetSysClockFreq>
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	4a42      	ldr	r2, [pc, #264]	; (8000ac8 <HAL_RCC_ClockConfig+0x15c>)
 80009be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <HAL_RCC_ClockConfig+0x160>)
 80009c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f001 fa92 	bl	8001ef4 <HAL_InitTick>
  return HAL_OK;
 80009d0:	2000      	movs	r0, #0
}
 80009d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	f023 0307 	bic.w	r3, r3, #7
 80009dc:	430b      	orrs	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	4299      	cmp	r1, r3
 80009e8:	d0ca      	beq.n	8000980 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
 80009ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009f2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009f6:	bf1e      	ittt	ne
 80009f8:	685a      	ldrne	r2, [r3, #4]
 80009fa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80009fe:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a00:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a02:	bf42      	ittt	mi
 8000a04:	685a      	ldrmi	r2, [r3, #4]
 8000a06:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000a0a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	68a8      	ldr	r0, [r5, #8]
 8000a10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a14:	4302      	orrs	r2, r0
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	e7b5      	b.n	8000986 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a1a:	686a      	ldr	r2, [r5, #4]
 8000a1c:	4c29      	ldr	r4, [pc, #164]	; (8000ac4 <HAL_RCC_ClockConfig+0x158>)
 8000a1e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a20:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a22:	d11c      	bne.n	8000a5e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a28:	d0df      	beq.n	80009ea <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a2a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a30:	f023 0303 	bic.w	r3, r3, #3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000a38:	f7ff fc18 	bl	800026c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a3e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d114      	bne.n	8000a6e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d09d      	beq.n	800098a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a4e:	f7ff fc0d 	bl	800026c <HAL_GetTick>
 8000a52:	1bc0      	subs	r0, r0, r7
 8000a54:	4540      	cmp	r0, r8
 8000a56:	d9f5      	bls.n	8000a44 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000a58:	2003      	movs	r0, #3
 8000a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a5e:	2a02      	cmp	r2, #2
 8000a60:	d102      	bne.n	8000a68 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a66:	e7df      	b.n	8000a28 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a68:	f013 0f02 	tst.w	r3, #2
 8000a6c:	e7dc      	b.n	8000a28 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d10f      	bne.n	8000a92 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a72:	6863      	ldr	r3, [r4, #4]
 8000a74:	f003 030c 	and.w	r3, r3, #12
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d086      	beq.n	800098a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a7c:	f7ff fbf6 	bl	800026c <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	4540      	cmp	r0, r8
 8000a84:	d9f5      	bls.n	8000a72 <HAL_RCC_ClockConfig+0x106>
 8000a86:	e7e7      	b.n	8000a58 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a88:	f7ff fbf0 	bl	800026c <HAL_GetTick>
 8000a8c:	1bc0      	subs	r0, r0, r7
 8000a8e:	4540      	cmp	r0, r8
 8000a90:	d8e2      	bhi.n	8000a58 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	f013 0f0c 	tst.w	r3, #12
 8000a98:	d1f6      	bne.n	8000a88 <HAL_RCC_ClockConfig+0x11c>
 8000a9a:	e776      	b.n	800098a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9c:	6813      	ldr	r3, [r2, #0]
 8000a9e:	f023 0307 	bic.w	r3, r3, #7
 8000aa2:	4333      	orrs	r3, r6
 8000aa4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	429e      	cmp	r6, r3
 8000aae:	d19c      	bne.n	80009ea <HAL_RCC_ClockConfig+0x7e>
 8000ab0:	e772      	b.n	8000998 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ab2:	6863      	ldr	r3, [r4, #4]
 8000ab4:	68e9      	ldr	r1, [r5, #12]
 8000ab6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6063      	str	r3, [r4, #4]
 8000abe:	e771      	b.n	80009a4 <HAL_RCC_ClockConfig+0x38>
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	08002b2d 	.word	0x08002b2d
 8000acc:	20000008 	.word	0x20000008

08000ad0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ade:	6810      	ldr	r0, [r2, #0]
}    
 8000ae0:	40d8      	lsrs	r0, r3
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	08002b3d 	.word	0x08002b3d
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000afe:	6810      	ldr	r0, [r2, #0]
} 
 8000b00:	40d8      	lsrs	r0, r3
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000
 8000b08:	08002b3d 	.word	0x08002b3d
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b10:	230f      	movs	r3, #15
 8000b12:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_RCC_GetClockConfig+0x34>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000b24:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000b2c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	08db      	lsrs	r3, r3, #3
 8000b32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b36:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_RCC_GetClockConfig+0x38>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	600b      	str	r3, [r1, #0]
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_TIM_Base_MspInit>:
 8000b4c:	4770      	bx	lr

08000b4e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b4e:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000b50:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	4770      	bx	lr

08000b64 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b64:	4770      	bx	lr

08000b66 <HAL_TIM_IC_CaptureCallback>:
 8000b66:	4770      	bx	lr

08000b68 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b68:	4770      	bx	lr

08000b6a <HAL_TIM_TriggerCallback>:
 8000b6a:	4770      	bx	lr

08000b6c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b6c:	6803      	ldr	r3, [r0, #0]
{
 8000b6e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b70:	691a      	ldr	r2, [r3, #16]
{
 8000b72:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b74:	0791      	lsls	r1, r2, #30
 8000b76:	d50e      	bpl.n	8000b96 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	0792      	lsls	r2, r2, #30
 8000b7c:	d50b      	bpl.n	8000b96 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b7e:	f06f 0202 	mvn.w	r2, #2
 8000b82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b84:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b86:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b88:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b8a:	079b      	lsls	r3, r3, #30
 8000b8c:	d077      	beq.n	8000c7e <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000b8e:	f7ff ffea 	bl	8000b66 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b92:	2300      	movs	r3, #0
 8000b94:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	0750      	lsls	r0, r2, #29
 8000b9c:	d510      	bpl.n	8000bc0 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	0751      	lsls	r1, r2, #29
 8000ba2:	d50d      	bpl.n	8000bc0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ba4:	f06f 0204 	mvn.w	r2, #4
 8000ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000baa:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bac:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bae:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000bb4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb6:	d068      	beq.n	8000c8a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bb8:	f7ff ffd5 	bl	8000b66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	0712      	lsls	r2, r2, #28
 8000bc6:	d50f      	bpl.n	8000be8 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	0710      	lsls	r0, r2, #28
 8000bcc:	d50c      	bpl.n	8000be8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000bce:	f06f 0208 	mvn.w	r2, #8
 8000bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bd4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bd6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bd8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bda:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000bdc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bde:	d05a      	beq.n	8000c96 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000be0:	f7ff ffc1 	bl	8000b66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000be4:	2300      	movs	r3, #0
 8000be6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	06d2      	lsls	r2, r2, #27
 8000bee:	d510      	bpl.n	8000c12 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	06d0      	lsls	r0, r2, #27
 8000bf4:	d50d      	bpl.n	8000c12 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bf6:	f06f 0210 	mvn.w	r2, #16
 8000bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bfc:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bfe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c00:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c02:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000c06:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c08:	d04b      	beq.n	8000ca2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c0a:	f7ff ffac 	bl	8000b66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	691a      	ldr	r2, [r3, #16]
 8000c16:	07d1      	lsls	r1, r2, #31
 8000c18:	d508      	bpl.n	8000c2c <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	d505      	bpl.n	8000c2c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c20:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c28:	f001 f92c 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	0610      	lsls	r0, r2, #24
 8000c32:	d508      	bpl.n	8000c46 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	0611      	lsls	r1, r2, #24
 8000c38:	d505      	bpl.n	8000c46 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c42:	f000 f89c 	bl	8000d7e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	0652      	lsls	r2, r2, #25
 8000c4c:	d508      	bpl.n	8000c60 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	0650      	lsls	r0, r2, #25
 8000c52:	d505      	bpl.n	8000c60 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c5c:	f7ff ff85 	bl	8000b6a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	0691      	lsls	r1, r2, #26
 8000c66:	d522      	bpl.n	8000cae <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	0692      	lsls	r2, r2, #26
 8000c6c:	d51f      	bpl.n	8000cae <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c6e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c72:	4620      	mov	r0, r4
    }
  }
}
 8000c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c7a:	f000 b87f 	b.w	8000d7c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c7e:	f7ff ff71 	bl	8000b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff ff70 	bl	8000b68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c88:	e783      	b.n	8000b92 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c8a:	f7ff ff6b 	bl	8000b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff ff6a 	bl	8000b68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c94:	e792      	b.n	8000bbc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c96:	f7ff ff65 	bl	8000b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ff64 	bl	8000b68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca0:	e7a0      	b.n	8000be4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ca2:	f7ff ff5f 	bl	8000b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff ff5e 	bl	8000b68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cac:	e7af      	b.n	8000c0e <HAL_TIM_IRQHandler+0xa2>
 8000cae:	bd10      	pop	{r4, pc}

08000cb0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000cb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d012      	beq.n	8000cde <TIM_Base_SetConfig+0x2e>
 8000cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d00e      	beq.n	8000cde <TIM_Base_SetConfig+0x2e>
 8000cc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cc4:	d00b      	beq.n	8000cde <TIM_Base_SetConfig+0x2e>
 8000cc6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d007      	beq.n	8000cde <TIM_Base_SetConfig+0x2e>
 8000cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	d003      	beq.n	8000cde <TIM_Base_SetConfig+0x2e>
 8000cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d11d      	bne.n	8000d1a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000cde:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ce4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <TIM_Base_SetConfig+0x94>)
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d012      	beq.n	8000d12 <TIM_Base_SetConfig+0x62>
 8000cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d00e      	beq.n	8000d12 <TIM_Base_SetConfig+0x62>
 8000cf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cf8:	d00b      	beq.n	8000d12 <TIM_Base_SetConfig+0x62>
 8000cfa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d007      	beq.n	8000d12 <TIM_Base_SetConfig+0x62>
 8000d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d003      	beq.n	8000d12 <TIM_Base_SetConfig+0x62>
 8000d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d103      	bne.n	8000d1a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d12:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d18:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d1a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d20:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000d22:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d24:	688b      	ldr	r3, [r1, #8]
 8000d26:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d28:	680b      	ldr	r3, [r1, #0]
 8000d2a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <TIM_Base_SetConfig+0x94>)
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d003      	beq.n	8000d3a <TIM_Base_SetConfig+0x8a>
 8000d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d36:	4298      	cmp	r0, r3
 8000d38:	d101      	bne.n	8000d3e <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d3a:	690b      	ldr	r3, [r1, #16]
 8000d3c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	6143      	str	r3, [r0, #20]
 8000d42:	4770      	bx	lr
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <HAL_TIM_Base_Init>:
{
 8000d48:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b1a0      	cbz	r0, 8000d78 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d56:	b91b      	cbnz	r3, 8000d60 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d5c:	f7ff fef6 	bl	8000b4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d60:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d62:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d68:	1d21      	adds	r1, r4, #4
 8000d6a:	f7ff ffa1 	bl	8000cb0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d78:	2001      	movs	r0, #1
}
 8000d7a:	bd10      	pop	{r4, pc}

08000d7c <HAL_TIMEx_CommutationCallback>:
 8000d7c:	4770      	bx	lr

08000d7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d7e:	4770      	bx	lr

08000d80 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000d80:	6803      	ldr	r3, [r0, #0]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d92:	2320      	movs	r3, #32
 8000d94:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000d98:	4770      	bx	lr
	...

08000d9c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000da0:	6805      	ldr	r5, [r0, #0]
 8000da2:	68c2      	ldr	r2, [r0, #12]
 8000da4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000da6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dac:	4313      	orrs	r3, r2
 8000dae:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000db2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000db8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000dbc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dc0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dc6:	696b      	ldr	r3, [r5, #20]
 8000dc8:	6982      	ldr	r2, [r0, #24]
 8000dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <UART_SetConfig+0x138>)
{
 8000dd4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000dd6:	429d      	cmp	r5, r3
 8000dd8:	f04f 0419 	mov.w	r4, #25
 8000ddc:	d146      	bne.n	8000e6c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000dde:	f7ff fe87 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8000de2:	fb04 f300 	mul.w	r3, r4, r0
 8000de6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000dea:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000dee:	00b6      	lsls	r6, r6, #2
 8000df0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000df4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000df8:	011e      	lsls	r6, r3, #4
 8000dfa:	f7ff fe79 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8000dfe:	4360      	muls	r0, r4
 8000e00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e0a:	f7ff fe71 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8000e0e:	4360      	muls	r0, r4
 8000e10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e1e:	fb08 7313 	mls	r3, r8, r3, r7
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	3332      	adds	r3, #50	; 0x32
 8000e26:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e2a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e2e:	f7ff fe5f 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8000e32:	4360      	muls	r0, r4
 8000e34:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	fbb0 faf2 	udiv	sl, r0, r2
 8000e3e:	f7ff fe57 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e42:	4360      	muls	r0, r4
 8000e44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e52:	fb08 a313 	mls	r3, r8, r3, sl
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	3332      	adds	r3, #50	; 0x32
 8000e5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	433b      	orrs	r3, r7
 8000e64:	4433      	add	r3, r6
 8000e66:	60ab      	str	r3, [r5, #8]
 8000e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6c:	f7ff fe30 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 8000e70:	fb04 f300 	mul.w	r3, r4, r0
 8000e74:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e78:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e7c:	00b6      	lsls	r6, r6, #2
 8000e7e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e82:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e86:	011e      	lsls	r6, r3, #4
 8000e88:	f7ff fe22 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 8000e8c:	4360      	muls	r0, r4
 8000e8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e98:	f7ff fe1a 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 8000e9c:	4360      	muls	r0, r4
 8000e9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ea8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eac:	fb08 7313 	mls	r3, r8, r3, r7
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	3332      	adds	r3, #50	; 0x32
 8000eb4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ebc:	f7ff fe08 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 8000ec0:	4360      	muls	r0, r4
 8000ec2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	fbb0 faf2 	udiv	sl, r0, r2
 8000ecc:	f7ff fe00 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	e7b7      	b.n	8000e42 <UART_SetConfig+0xa6>
 8000ed2:	bf00      	nop
 8000ed4:	40013800 	.word	0x40013800

08000ed8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	4604      	mov	r4, r0
 8000edc:	460e      	mov	r6, r1
 8000ede:	4617      	mov	r7, r2
 8000ee0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	680b      	ldr	r3, [r1, #0]
 8000ee6:	ea36 0303 	bics.w	r3, r6, r3
 8000eea:	d101      	bne.n	8000ef0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ef0:	1c6b      	adds	r3, r5, #1
 8000ef2:	d0f7      	beq.n	8000ee4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ef4:	b995      	cbnz	r5, 8000f1c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ef6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000ef8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f14:	2300      	movs	r3, #0
 8000f16:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f1c:	f7ff f9a6 	bl	800026c <HAL_GetTick>
 8000f20:	1bc0      	subs	r0, r0, r7
 8000f22:	4285      	cmp	r5, r0
 8000f24:	d2dd      	bcs.n	8000ee2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f26:	e7e6      	b.n	8000ef6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f28 <HAL_UART_Init>:
{
 8000f28:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	b340      	cbz	r0, 8000f80 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f2e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f36:	b91b      	cbnz	r3, 8000f40 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f3c:	f001 f8ac 	bl	8002098 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f40:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f42:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f48:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f4a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f50:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f52:	f7ff ff23 	bl	8000d9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f56:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f58:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f68:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f70:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f72:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f74:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
}
 8000f82:	bd10      	pop	{r4, pc}

08000f84 <HAL_UART_Transmit>:
{
 8000f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f88:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000f8e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000f90:	2b20      	cmp	r3, #32
{
 8000f92:	460d      	mov	r5, r1
 8000f94:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f96:	d14e      	bne.n	8001036 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	d049      	beq.n	8001030 <HAL_UART_Transmit+0xac>
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d047      	beq.n	8001030 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000fa0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d046      	beq.n	8001036 <HAL_UART_Transmit+0xb2>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fb2:	2321      	movs	r3, #33	; 0x21
 8000fb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000fb8:	f7ff f958 	bl	800026c <HAL_GetTick>
 8000fbc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000fbe:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fc2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b96b      	cbnz	r3, 8000fe8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4632      	mov	r2, r6
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff ff80 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fd8:	b9a8      	cbnz	r0, 8001006 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000fda:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000fdc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000fe0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000fe8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fea:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ff2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ff4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ffe:	d10e      	bne.n	800101e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001000:	f7ff ff6a 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001004:	b110      	cbz	r0, 800100c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800100c:	882b      	ldrh	r3, [r5, #0]
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001014:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001016:	6923      	ldr	r3, [r4, #16]
 8001018:	b943      	cbnz	r3, 800102c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800101a:	3502      	adds	r5, #2
 800101c:	e7d3      	b.n	8000fc6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800101e:	f7ff ff5b 	bl	8000ed8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001022:	2800      	cmp	r0, #0
 8001024:	d1ef      	bne.n	8001006 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	782a      	ldrb	r2, [r5, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	3501      	adds	r5, #1
 800102e:	e7ca      	b.n	8000fc6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001030:	2001      	movs	r0, #1
 8001032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001036:	2002      	movs	r0, #2
}
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800103c <HAL_UART_TxCpltCallback>:
 800103c:	4770      	bx	lr

0800103e <HAL_UART_RxCpltCallback>:
 800103e:	4770      	bx	lr

08001040 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001040:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001044:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001046:	2b22      	cmp	r3, #34	; 0x22
 8001048:	d136      	bne.n	80010b8 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800104a:	6883      	ldr	r3, [r0, #8]
 800104c:	6901      	ldr	r1, [r0, #16]
 800104e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001052:	6802      	ldr	r2, [r0, #0]
 8001054:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001056:	d123      	bne.n	80010a0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001058:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800105a:	b9e9      	cbnz	r1, 8001098 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800105c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001060:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001064:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001066:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001068:	3c01      	subs	r4, #1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800106e:	b98c      	cbnz	r4, 8001094 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001070:	6803      	ldr	r3, [r0, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	f022 0220 	bic.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001080:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800108a:	2320      	movs	r3, #32
 800108c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001090:	f7ff ffd5 	bl	800103e <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001094:	2000      	movs	r0, #0
}
 8001096:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	f823 2b01 	strh.w	r2, [r3], #1
 800109e:	e7e1      	b.n	8001064 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80010a0:	b921      	cbnz	r1, 80010ac <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	6852      	ldr	r2, [r2, #4]
 80010a6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e7dc      	b.n	8001066 <UART_Receive_IT+0x26>
 80010ac:	6852      	ldr	r2, [r2, #4]
 80010ae:	1c59      	adds	r1, r3, #1
 80010b0:	6281      	str	r1, [r0, #40]	; 0x28
 80010b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b6:	e7f7      	b.n	80010a8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80010b8:	2002      	movs	r0, #2
 80010ba:	bd10      	pop	{r4, pc}

080010bc <HAL_UART_ErrorCallback>:
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010c0:	6803      	ldr	r3, [r0, #0]
{
 80010c2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010c4:	681a      	ldr	r2, [r3, #0]
{
 80010c6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80010c8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010ca:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010cc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80010ce:	d107      	bne.n	80010e0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010d0:	0696      	lsls	r6, r2, #26
 80010d2:	d55a      	bpl.n	800118a <HAL_UART_IRQHandler+0xca>
 80010d4:	068d      	lsls	r5, r1, #26
 80010d6:	d558      	bpl.n	800118a <HAL_UART_IRQHandler+0xca>
}
 80010d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80010dc:	f7ff bfb0 	b.w	8001040 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80010e0:	f015 0501 	ands.w	r5, r5, #1
 80010e4:	d102      	bne.n	80010ec <HAL_UART_IRQHandler+0x2c>
 80010e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80010ea:	d04e      	beq.n	800118a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80010ec:	07d3      	lsls	r3, r2, #31
 80010ee:	d505      	bpl.n	80010fc <HAL_UART_IRQHandler+0x3c>
 80010f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010f2:	bf42      	ittt	mi
 80010f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80010f6:	f043 0301 	orrmi.w	r3, r3, #1
 80010fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010fc:	0750      	lsls	r0, r2, #29
 80010fe:	d504      	bpl.n	800110a <HAL_UART_IRQHandler+0x4a>
 8001100:	b11d      	cbz	r5, 800110a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001102:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800110a:	0793      	lsls	r3, r2, #30
 800110c:	d504      	bpl.n	8001118 <HAL_UART_IRQHandler+0x58>
 800110e:	b11d      	cbz	r5, 8001118 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001118:	0716      	lsls	r6, r2, #28
 800111a:	d504      	bpl.n	8001126 <HAL_UART_IRQHandler+0x66>
 800111c:	b11d      	cbz	r5, 8001126 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800111e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d066      	beq.n	80011fa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800112c:	0695      	lsls	r5, r2, #26
 800112e:	d504      	bpl.n	800113a <HAL_UART_IRQHandler+0x7a>
 8001130:	0688      	lsls	r0, r1, #26
 8001132:	d502      	bpl.n	800113a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff ff83 	bl	8001040 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800113a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800113c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800113e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001142:	0711      	lsls	r1, r2, #28
 8001144:	d402      	bmi.n	800114c <HAL_UART_IRQHandler+0x8c>
 8001146:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800114a:	d01a      	beq.n	8001182 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800114c:	f7ff fe18 	bl	8000d80 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	0652      	lsls	r2, r2, #25
 8001156:	d510      	bpl.n	800117a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001158:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800115a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800115c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001160:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001162:	b150      	cbz	r0, 800117a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_UART_IRQHandler+0x13c>)
 8001166:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001168:	f7ff f8d8 	bl	800031c <HAL_DMA_Abort_IT>
 800116c:	2800      	cmp	r0, #0
 800116e:	d044      	beq.n	80011fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001170:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001178:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ff9e 	bl	80010bc <HAL_UART_ErrorCallback>
 8001180:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001182:	f7ff ff9b 	bl	80010bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001186:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001188:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800118a:	0616      	lsls	r6, r2, #24
 800118c:	d527      	bpl.n	80011de <HAL_UART_IRQHandler+0x11e>
 800118e:	060d      	lsls	r5, r1, #24
 8001190:	d525      	bpl.n	80011de <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001192:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001196:	2a21      	cmp	r2, #33	; 0x21
 8001198:	d12f      	bne.n	80011fa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800119a:	68a2      	ldr	r2, [r4, #8]
 800119c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011a0:	6a22      	ldr	r2, [r4, #32]
 80011a2:	d117      	bne.n	80011d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011a4:	8811      	ldrh	r1, [r2, #0]
 80011a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011aa:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80011ac:	6921      	ldr	r1, [r4, #16]
 80011ae:	b979      	cbnz	r1, 80011d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80011b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011b2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80011b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011b6:	3a01      	subs	r2, #1
 80011b8:	b292      	uxth	r2, r2
 80011ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011bc:	b9ea      	cbnz	r2, 80011fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80011d0:	3201      	adds	r2, #1
 80011d2:	e7ee      	b.n	80011b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80011d4:	1c51      	adds	r1, r2, #1
 80011d6:	6221      	str	r1, [r4, #32]
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	e7ea      	b.n	80011b4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011de:	0650      	lsls	r0, r2, #25
 80011e0:	d50b      	bpl.n	80011fa <HAL_UART_IRQHandler+0x13a>
 80011e2:	064a      	lsls	r2, r1, #25
 80011e4:	d509      	bpl.n	80011fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80011e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80011ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80011f0:	2320      	movs	r3, #32
 80011f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80011f6:	f7ff ff21 	bl	800103c <HAL_UART_TxCpltCallback>
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	08001201 	.word	0x08001201

08001200 <UART_DMAAbortOnError>:
{
 8001200:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001202:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001204:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001206:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001208:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800120a:	f7ff ff57 	bl	80010bc <HAL_UART_ErrorCallback>
 800120e:	bd08      	pop	{r3, pc}

08001210 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001210:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001212:	f000 fb95 	bl	8001940 <vTaskStartScheduler>
  
  return osOK;
}
 8001216:	2000      	movs	r0, #0
 8001218:	bd08      	pop	{r3, pc}

0800121a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800121a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800121c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8001220:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001222:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001224:	bf08      	it	eq
 8001226:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001228:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 800122a:	bf18      	it	ne
 800122c:	3403      	addne	r4, #3
{
 800122e:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001230:	e890 0022 	ldmia.w	r0, {r1, r5}
 8001234:	a803      	add	r0, sp, #12
 8001236:	9001      	str	r0, [sp, #4]
 8001238:	9400      	str	r4, [sp, #0]
 800123a:	4628      	mov	r0, r5
 800123c:	f000 fab0 	bl	80017a0 <xTaskCreate>
 8001240:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8001242:	bf14      	ite	ne
 8001244:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8001246:	9803      	ldreq	r0, [sp, #12]
}
 8001248:	b005      	add	sp, #20
 800124a:	bd30      	pop	{r4, r5, pc}

0800124c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800124c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800124e:	2800      	cmp	r0, #0
 8001250:	bf08      	it	eq
 8001252:	2001      	moveq	r0, #1
 8001254:	f000 fcc2 	bl	8001bdc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001258:	2000      	movs	r0, #0
 800125a:	bd08      	pop	{r3, pc}

0800125c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800125c:	f100 0308 	add.w	r3, r0, #8
 8001260:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001262:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001266:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001268:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800126a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800126c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800126e:	6003      	str	r3, [r0, #0]
 8001270:	4770      	bx	lr

08001272 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	6103      	str	r3, [r0, #16]
 8001276:	4770      	bx	lr

08001278 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001278:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800127a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800127c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800127e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001284:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001286:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001288:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800128a:	3301      	adds	r3, #1
 800128c:	6003      	str	r3, [r0, #0]
 800128e:	4770      	bx	lr

08001290 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001290:	680a      	ldr	r2, [r1, #0]
{
 8001292:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001294:	1c53      	adds	r3, r2, #1
 8001296:	d10a      	bne.n	80012ae <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001298:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800129e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80012a0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80012a2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80012a4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80012a6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80012a8:	3301      	adds	r3, #1
 80012aa:	6003      	str	r3, [r0, #0]
 80012ac:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012ae:	f100 0308 	add.w	r3, r0, #8
 80012b2:	685c      	ldr	r4, [r3, #4]
 80012b4:	6825      	ldr	r5, [r4, #0]
 80012b6:	42aa      	cmp	r2, r5
 80012b8:	d3ef      	bcc.n	800129a <vListInsert+0xa>
 80012ba:	4623      	mov	r3, r4
 80012bc:	e7f9      	b.n	80012b2 <vListInsert+0x22>

080012be <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012be:	6841      	ldr	r1, [r0, #4]
 80012c0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80012c2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012c4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80012c6:	6882      	ldr	r2, [r0, #8]
 80012c8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012ce:	bf08      	it	eq
 80012d0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80012d2:	2200      	movs	r2, #0
 80012d4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	3801      	subs	r0, #1
 80012da:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80012dc:	4770      	bx	lr
	...

080012e0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <prvTaskExitError+0x2c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	d008      	beq.n	80012fa <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	e7fe      	b.n	80012f8 <prvTaskExitError+0x18>
 80012fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	e7fe      	b.n	800130a <prvTaskExitError+0x2a>
 800130c:	20000004 	.word	0x20000004

08001310 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <prvPortStartFirstTask+0x1c>)
 8001312:	6800      	ldr	r0, [r0, #0]
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	f380 8808 	msr	MSP, r0
 800131a:	b662      	cpsie	i
 800131c:	b661      	cpsie	f
 800131e:	f3bf 8f4f 	dsb	sy
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	df00      	svc	0
 8001328:	bf00      	nop
 800132a:	0000      	.short	0x0000
 800132c:	e000ed08 	.word	0xe000ed08

08001330 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001334:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800133a:	f021 0101 	bic.w	r1, r1, #1
 800133e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001342:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001346:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800134a:	3840      	subs	r0, #64	; 0x40
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	080012e1 	.word	0x080012e1
	...

08001360 <SVC_Handler>:
	__asm volatile (
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <pxCurrentTCBConst2>)
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	6808      	ldr	r0, [r1, #0]
 8001366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800136a:	f380 8809 	msr	PSP, r0
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	f380 8811 	msr	BASEPRI, r0
 800137a:	f04e 0e0d 	orr.w	lr, lr, #13
 800137e:	4770      	bx	lr

08001380 <pxCurrentTCBConst2>:
 8001380:	20000cac 	.word	0x20000cac

08001384 <vPortEnterCritical>:
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <vPortEnterCritical+0x3c>)
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800139a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800139c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800139e:	d10d      	bne.n	80013bc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <vPortEnterCritical+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80013a8:	d008      	beq.n	80013bc <vPortEnterCritical+0x38>
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	e7fe      	b.n	80013ba <vPortEnterCritical+0x36>
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000004 	.word	0x20000004
 80013c4:	e000ed04 	.word	0xe000ed04

080013c8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80013c8:	4a08      	ldr	r2, [pc, #32]	; (80013ec <vPortExitCritical+0x24>)
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	b943      	cbnz	r3, 80013e0 <vPortExitCritical+0x18>
 80013ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d2:	f383 8811 	msr	BASEPRI, r3
 80013d6:	f3bf 8f6f 	isb	sy
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	e7fe      	b.n	80013de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80013e0:	3b01      	subs	r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80013e4:	b90b      	cbnz	r3, 80013ea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	4770      	bx	lr
 80013ec:	20000004 	.word	0x20000004

080013f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80013f0:	f3ef 8009 	mrs	r0, PSP
 80013f4:	f3bf 8f6f 	isb	sy
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <pxCurrentTCBConst>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001400:	6010      	str	r0, [r2, #0]
 8001402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001406:	f04f 0050 	mov.w	r0, #80	; 0x50
 800140a:	f380 8811 	msr	BASEPRI, r0
 800140e:	f000 fc43 	bl	8001c98 <vTaskSwitchContext>
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f380 8811 	msr	BASEPRI, r0
 800141a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	6808      	ldr	r0, [r1, #0]
 8001422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001426:	f380 8809 	msr	PSP, r0
 800142a:	f3bf 8f6f 	isb	sy
 800142e:	4770      	bx	lr

08001430 <pxCurrentTCBConst>:
 8001430:	20000cac 	.word	0x20000cac

08001434 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001434:	b508      	push	{r3, lr}
	__asm volatile
 8001436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143a:	f383 8811 	msr	BASEPRI, r3
 800143e:	f3bf 8f6f 	isb	sy
 8001442:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001446:	f000 fabf 	bl	80019c8 <xTaskIncrementTick>
 800144a:	b118      	cbz	r0, 8001454 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800144c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <SysTick_Handler+0x28>)
 8001452:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001454:	2300      	movs	r3, #0
 8001456:	f383 8811 	msr	BASEPRI, r3
 800145a:	bd08      	pop	{r3, pc}
 800145c:	e000ed04 	.word	0xe000ed04

08001460 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <vPortSetupTimerInterrupt+0x1c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fbb3 f3f2 	udiv	r3, r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <vPortSetupTimerInterrupt+0x20>)
 800146e:	3b01      	subs	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001472:	2207      	movs	r2, #7
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <vPortSetupTimerInterrupt+0x24>)
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	e000e014 	.word	0xe000e014
 8001484:	e000e010 	.word	0xe000e010

08001488 <xPortStartScheduler>:
{
 8001488:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800148c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001498:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80014a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80014a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80014ac:	2207      	movs	r2, #7
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <xPortStartScheduler+0x88>)
 80014b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80014b6:	1e54      	subs	r4, r2, #1
 80014b8:	0600      	lsls	r0, r0, #24
 80014ba:	d41c      	bmi.n	80014f6 <xPortStartScheduler+0x6e>
 80014bc:	b101      	cbz	r1, 80014c0 <xPortStartScheduler+0x38>
 80014be:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80014c8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <xPortStartScheduler+0x80>)
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <xPortStartScheduler+0x8c>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80014e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80014e4:	f7ff ffbc 	bl	8001460 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80014e8:	2200      	movs	r2, #0
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <xPortStartScheduler+0x90>)
 80014ec:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80014ee:	f7ff ff0f 	bl	8001310 <prvPortStartFirstTask>
	prvTaskExitError();
 80014f2:	f7ff fef5 	bl	80012e0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80014f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80014fa:	2101      	movs	r1, #1
 80014fc:	0052      	lsls	r2, r2, #1
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f88d 2003 	strb.w	r2, [sp, #3]
 8001504:	4622      	mov	r2, r4
 8001506:	e7d4      	b.n	80014b2 <xPortStartScheduler+0x2a>
 8001508:	e000e400 	.word	0xe000e400
 800150c:	2000008c 	.word	0x2000008c
 8001510:	20000090 	.word	0x20000090
 8001514:	e000ed20 	.word	0xe000ed20
 8001518:	20000004 	.word	0x20000004

0800151c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800151c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <prvInsertBlockIntoFreeList+0x40>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4282      	cmp	r2, r0
 8001524:	d318      	bcc.n	8001558 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001526:	685c      	ldr	r4, [r3, #4]
 8001528:	1919      	adds	r1, r3, r4
 800152a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800152c:	bf01      	itttt	eq
 800152e:	6841      	ldreq	r1, [r0, #4]
 8001530:	4618      	moveq	r0, r3
 8001532:	1909      	addeq	r1, r1, r4
 8001534:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001536:	6844      	ldr	r4, [r0, #4]
 8001538:	1901      	adds	r1, r0, r4
 800153a:	428a      	cmp	r2, r1
 800153c:	d107      	bne.n	800154e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <prvInsertBlockIntoFreeList+0x44>)
 8001540:	6809      	ldr	r1, [r1, #0]
 8001542:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001544:	bf1f      	itttt	ne
 8001546:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001548:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800154a:	1909      	addne	r1, r1, r4
 800154c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800154e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001550:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001552:	bf18      	it	ne
 8001554:	6018      	strne	r0, [r3, #0]
 8001556:	bd10      	pop	{r4, pc}
 8001558:	4613      	mov	r3, r2
 800155a:	e7e1      	b.n	8001520 <prvInsertBlockIntoFreeList+0x4>
 800155c:	20000ca4 	.word	0x20000ca4
 8001560:	20000094 	.word	0x20000094

08001564 <pvPortMalloc>:
{
 8001564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001568:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800156a:	f000 fa25 	bl	80019b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800156e:	493e      	ldr	r1, [pc, #248]	; (8001668 <pvPortMalloc+0x104>)
 8001570:	4d3e      	ldr	r5, [pc, #248]	; (800166c <pvPortMalloc+0x108>)
 8001572:	680b      	ldr	r3, [r1, #0]
 8001574:	bb0b      	cbnz	r3, 80015ba <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001576:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001578:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800157a:	bf1d      	ittte	ne
 800157c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800157e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001582:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001586:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800158a:	bf1c      	itt	ne
 800158c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800158e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001590:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001592:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001594:	4e37      	ldr	r6, [pc, #220]	; (8001674 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001596:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001598:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800159c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800159e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80015a0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80015a2:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80015a4:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80015a6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80015a8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80015ac:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015ae:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <pvPortMalloc+0x118>)
 80015b2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80015b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015b8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015ba:	682f      	ldr	r7, [r5, #0]
 80015bc:	4227      	tst	r7, r4
 80015be:	d116      	bne.n	80015ee <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80015c0:	2c00      	cmp	r4, #0
 80015c2:	d040      	beq.n	8001646 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80015c4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80015c8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80015ca:	bf1c      	itt	ne
 80015cc:	f023 0307 	bicne.w	r3, r3, #7
 80015d0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015d2:	b163      	cbz	r3, 80015ee <pvPortMalloc+0x8a>
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <pvPortMalloc+0x118>)
 80015d6:	6816      	ldr	r6, [r2, #0]
 80015d8:	4690      	mov	r8, r2
 80015da:	42b3      	cmp	r3, r6
 80015dc:	d807      	bhi.n	80015ee <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <pvPortMalloc+0x110>)
 80015e0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015e2:	6868      	ldr	r0, [r5, #4]
 80015e4:	4283      	cmp	r3, r0
 80015e6:	d804      	bhi.n	80015f2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80015e8:	6809      	ldr	r1, [r1, #0]
 80015ea:	428d      	cmp	r5, r1
 80015ec:	d107      	bne.n	80015fe <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80015ee:	2400      	movs	r4, #0
 80015f0:	e029      	b.n	8001646 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015f2:	682c      	ldr	r4, [r5, #0]
 80015f4:	2c00      	cmp	r4, #0
 80015f6:	d0f7      	beq.n	80015e8 <pvPortMalloc+0x84>
 80015f8:	462a      	mov	r2, r5
 80015fa:	4625      	mov	r5, r4
 80015fc:	e7f1      	b.n	80015e2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015fe:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001600:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001602:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001604:	1ac2      	subs	r2, r0, r3
 8001606:	2a10      	cmp	r2, #16
 8001608:	d90f      	bls.n	800162a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800160a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800160c:	0741      	lsls	r1, r0, #29
 800160e:	d008      	beq.n	8001622 <pvPortMalloc+0xbe>
	__asm volatile
 8001610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001614:	f383 8811 	msr	BASEPRI, r3
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	f3bf 8f4f 	dsb	sy
 8001620:	e7fe      	b.n	8001620 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001622:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001624:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001626:	f7ff ff79 	bl	800151c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800162a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800162c:	4912      	ldr	r1, [pc, #72]	; (8001678 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800162e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001630:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001632:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001634:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001636:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800163a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800163c:	bf38      	it	cc
 800163e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001640:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001642:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001644:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001646:	f000 fa51 	bl	8001aec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800164a:	0763      	lsls	r3, r4, #29
 800164c:	d008      	beq.n	8001660 <pvPortMalloc+0xfc>
 800164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001652:	f383 8811 	msr	BASEPRI, r3
 8001656:	f3bf 8f6f 	isb	sy
 800165a:	f3bf 8f4f 	dsb	sy
 800165e:	e7fe      	b.n	800165e <pvPortMalloc+0xfa>
}
 8001660:	4620      	mov	r0, r4
 8001662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001666:	bf00      	nop
 8001668:	20000094 	.word	0x20000094
 800166c:	20000c98 	.word	0x20000c98
 8001670:	20000098 	.word	0x20000098
 8001674:	20000ca4 	.word	0x20000ca4
 8001678:	20000ca0 	.word	0x20000ca0
 800167c:	20000c9c 	.word	0x20000c9c

08001680 <vPortFree>:
{
 8001680:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001682:	4604      	mov	r4, r0
 8001684:	b370      	cbz	r0, 80016e4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <vPortFree+0x68>)
 8001688:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	4213      	tst	r3, r2
 8001690:	d108      	bne.n	80016a4 <vPortFree+0x24>
 8001692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	f3bf 8f4f 	dsb	sy
 80016a2:	e7fe      	b.n	80016a2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80016a8:	b141      	cbz	r1, 80016bc <vPortFree+0x3c>
 80016aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	e7fe      	b.n	80016ba <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016bc:	ea23 0302 	bic.w	r3, r3, r2
 80016c0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80016c4:	f000 f978 	bl	80019b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <vPortFree+0x6c>)
 80016ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80016ce:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016d0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016d4:	440b      	add	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016d8:	f7ff ff20 	bl	800151c <prvInsertBlockIntoFreeList>
}
 80016dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80016e0:	f000 ba04 	b.w	8001aec <xTaskResumeAll>
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	20000c98 	.word	0x20000c98
 80016ec:	20000c9c 	.word	0x20000c9c

080016f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <prvResetNextTaskUnblockTime+0x1c>)
 80016f2:	6813      	ldr	r3, [r2, #0]
 80016f4:	6819      	ldr	r1, [r3, #0]
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <prvResetNextTaskUnblockTime+0x20>)
 80016f8:	b919      	cbnz	r1, 8001702 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016fa:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001706:	68d2      	ldr	r2, [r2, #12]
 8001708:	6852      	ldr	r2, [r2, #4]
 800170a:	e7f8      	b.n	80016fe <prvResetNextTaskUnblockTime+0xe>
 800170c:	20000cb0 	.word	0x20000cb0
 8001710:	20000d88 	.word	0x20000d88

08001714 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001718:	4e1b      	ldr	r6, [pc, #108]	; (8001788 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800171a:	681d      	ldr	r5, [r3, #0]
{
 800171c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800171e:	6830      	ldr	r0, [r6, #0]
{
 8001720:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001722:	3004      	adds	r0, #4
 8001724:	f7ff fdcb 	bl	80012be <uxListRemove>
 8001728:	4633      	mov	r3, r6
 800172a:	b940      	cbnz	r0, 800173e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800172c:	2001      	movs	r0, #1
 800172e:	6831      	ldr	r1, [r6, #0]
 8001730:	4e16      	ldr	r6, [pc, #88]	; (800178c <prvAddCurrentTaskToDelayedList+0x78>)
 8001732:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001734:	6832      	ldr	r2, [r6, #0]
 8001736:	4088      	lsls	r0, r1
 8001738:	ea22 0200 	bic.w	r2, r2, r0
 800173c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800173e:	1c62      	adds	r2, r4, #1
 8001740:	d107      	bne.n	8001752 <prvAddCurrentTaskToDelayedList+0x3e>
 8001742:	b137      	cbz	r7, 8001752 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	4812      	ldr	r0, [pc, #72]	; (8001790 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001748:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800174a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800174e:	f7ff bd93 	b.w	8001278 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001752:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001754:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001756:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001758:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800175a:	d907      	bls.n	800176c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <prvAddCurrentTaskToDelayedList+0x80>)
 800175e:	6810      	ldr	r0, [r2, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
}
 8001762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001766:	3104      	adds	r1, #4
 8001768:	f7ff bd92 	b.w	8001290 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <prvAddCurrentTaskToDelayedList+0x84>)
 800176e:	6810      	ldr	r0, [r2, #0]
 8001770:	6819      	ldr	r1, [r3, #0]
 8001772:	3104      	adds	r1, #4
 8001774:	f7ff fd8c 	bl	8001290 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <prvAddCurrentTaskToDelayedList+0x88>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800177e:	bf38      	it	cc
 8001780:	601c      	strcc	r4, [r3, #0]
 8001782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001784:	20000dd0 	.word	0x20000dd0
 8001788:	20000cac 	.word	0x20000cac
 800178c:	20000d58 	.word	0x20000d58
 8001790:	20000da8 	.word	0x20000da8
 8001794:	20000cb4 	.word	0x20000cb4
 8001798:	20000cb0 	.word	0x20000cb0
 800179c:	20000d88 	.word	0x20000d88

080017a0 <xTaskCreate>:
	{
 80017a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017a4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80017a8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017aa:	4650      	mov	r0, sl
	{
 80017ac:	460f      	mov	r7, r1
 80017ae:	4699      	mov	r9, r3
 80017b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017b2:	f7ff fed7 	bl	8001564 <pvPortMalloc>
			if( pxStack != NULL )
 80017b6:	4605      	mov	r5, r0
 80017b8:	2800      	cmp	r0, #0
 80017ba:	f000 8096 	beq.w	80018ea <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80017be:	2054      	movs	r0, #84	; 0x54
 80017c0:	f7ff fed0 	bl	8001564 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80017c4:	4604      	mov	r4, r0
 80017c6:	2800      	cmp	r0, #0
 80017c8:	f000 808c 	beq.w	80018e4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80017cc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80017d0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80017d2:	4455      	add	r5, sl
 80017d4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80017d6:	f025 0a07 	bic.w	sl, r5, #7
 80017da:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80017de:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80017e0:	7859      	ldrb	r1, [r3, #1]
 80017e2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80017e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80017ea:	b109      	cbz	r1, 80017f0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80017ec:	42bb      	cmp	r3, r7
 80017ee:	d1f7      	bne.n	80017e0 <xTaskCreate+0x40>
 80017f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017f2:	f04f 0b00 	mov.w	fp, #0
 80017f6:	2d06      	cmp	r5, #6
 80017f8:	bf28      	it	cs
 80017fa:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017fc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80017fe:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001800:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001802:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001804:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001808:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800180c:	f7ff fd31 	bl	8001272 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001810:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001814:	f104 0018 	add.w	r0, r4, #24
 8001818:	f7ff fd2b 	bl	8001272 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800181c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001820:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001822:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001824:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001826:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800182a:	464a      	mov	r2, r9
 800182c:	4641      	mov	r1, r8
 800182e:	4650      	mov	r0, sl
 8001830:	f7ff fd7e 	bl	8001330 <pxPortInitialiseStack>
 8001834:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001836:	b106      	cbz	r6, 800183a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001838:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800183a:	f7ff fda3 	bl	8001384 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001840:	4e32      	ldr	r6, [pc, #200]	; (800190c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001938 <xTaskCreate+0x198>
 8001848:	3201      	adds	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800184c:	6835      	ldr	r5, [r6, #0]
 800184e:	2d00      	cmp	r5, #0
 8001850:	d14e      	bne.n	80018f0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001852:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d11d      	bne.n	8001896 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800185a:	eb08 0005 	add.w	r0, r8, r5
 800185e:	3514      	adds	r5, #20
 8001860:	f7ff fcfc 	bl	800125c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001864:	2d8c      	cmp	r5, #140	; 0x8c
 8001866:	d1f8      	bne.n	800185a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001868:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800193c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800186c:	4d28      	ldr	r5, [pc, #160]	; (8001910 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800186e:	4648      	mov	r0, r9
 8001870:	f7ff fcf4 	bl	800125c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001874:	4628      	mov	r0, r5
 8001876:	f7ff fcf1 	bl	800125c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800187a:	4826      	ldr	r0, [pc, #152]	; (8001914 <xTaskCreate+0x174>)
 800187c:	f7ff fcee 	bl	800125c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <xTaskCreate+0x178>)
 8001882:	f7ff fceb 	bl	800125c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001886:	4825      	ldr	r0, [pc, #148]	; (800191c <xTaskCreate+0x17c>)
 8001888:	f7ff fce8 	bl	800125c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <xTaskCreate+0x180>)
 800188e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <xTaskCreate+0x184>)
 8001894:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001896:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800189a:	4924      	ldr	r1, [pc, #144]	; (800192c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800189c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800189e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80018a0:	3301      	adds	r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80018a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018a6:	fa05 f302 	lsl.w	r3, r5, r2
 80018aa:	4303      	orrs	r3, r0
 80018ac:	2014      	movs	r0, #20
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	fb00 8002 	mla	r0, r0, r2, r8
 80018b4:	4639      	mov	r1, r7
 80018b6:	f7ff fcdf 	bl	8001278 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80018ba:	f7ff fd85 	bl	80013c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <xTaskCreate+0x190>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b163      	cbz	r3, 80018de <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018c4:	6833      	ldr	r3, [r6, #0]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d207      	bcs.n	80018de <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <xTaskCreate+0x194>)
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	f3bf 8f6f 	isb	sy
	}
 80018de:	4628      	mov	r0, r5
 80018e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80018e4:	4628      	mov	r0, r5
 80018e6:	f7ff fecb 	bl	8001680 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018ea:	f04f 35ff 	mov.w	r5, #4294967295
 80018ee:	e7f6      	b.n	80018de <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <xTaskCreate+0x190>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ce      	bne.n	8001896 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018fe:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001900:	bf98      	it	ls
 8001902:	6034      	strls	r4, [r6, #0]
 8001904:	e7c7      	b.n	8001896 <xTaskCreate+0xf6>
 8001906:	bf00      	nop
 8001908:	20000d44 	.word	0x20000d44
 800190c:	20000cac 	.word	0x20000cac
 8001910:	20000d70 	.word	0x20000d70
 8001914:	20000d90 	.word	0x20000d90
 8001918:	20000dbc 	.word	0x20000dbc
 800191c:	20000da8 	.word	0x20000da8
 8001920:	20000cb0 	.word	0x20000cb0
 8001924:	20000cb4 	.word	0x20000cb4
 8001928:	20000d54 	.word	0x20000d54
 800192c:	20000d58 	.word	0x20000d58
 8001930:	20000da4 	.word	0x20000da4
 8001934:	e000ed04 	.word	0xe000ed04
 8001938:	20000cb8 	.word	0x20000cb8
 800193c:	20000d5c 	.word	0x20000d5c

08001940 <vTaskStartScheduler>:
{
 8001940:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001942:	2400      	movs	r4, #0
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <vTaskStartScheduler+0x60>)
 8001946:	9400      	str	r4, [sp, #0]
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	4623      	mov	r3, r4
 800194e:	4915      	ldr	r1, [pc, #84]	; (80019a4 <vTaskStartScheduler+0x64>)
 8001950:	4815      	ldr	r0, [pc, #84]	; (80019a8 <vTaskStartScheduler+0x68>)
 8001952:	f7ff ff25 	bl	80017a0 <xTaskCreate>
	if( xReturn == pdPASS )
 8001956:	2801      	cmp	r0, #1
 8001958:	d114      	bne.n	8001984 <vTaskStartScheduler+0x44>
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800196a:	f04f 32ff 	mov.w	r2, #4294967295
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <vTaskStartScheduler+0x6c>)
 8001970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <vTaskStartScheduler+0x70>)
 8001974:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <vTaskStartScheduler+0x74>)
 8001978:	601c      	str	r4, [r3, #0]
}
 800197a:	b002      	add	sp, #8
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001980:	f7ff bd82 	b.w	8001488 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001984:	3001      	adds	r0, #1
 8001986:	d108      	bne.n	800199a <vTaskStartScheduler+0x5a>
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	e7fe      	b.n	8001998 <vTaskStartScheduler+0x58>
}
 800199a:	b002      	add	sp, #8
 800199c:	bd10      	pop	{r4, pc}
 800199e:	bf00      	nop
 80019a0:	20000d84 	.word	0x20000d84
 80019a4:	08002af4 	.word	0x08002af4
 80019a8:	08001c25 	.word	0x08001c25
 80019ac:	20000d88 	.word	0x20000d88
 80019b0:	20000da4 	.word	0x20000da4
 80019b4:	20000dd0 	.word	0x20000dd0

080019b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80019b8:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <vTaskSuspendAll+0xc>)
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000d50 	.word	0x20000d50

080019c8 <xTaskIncrementTick>:
{
 80019c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <xTaskIncrementTick+0xf8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d153      	bne.n	8001a7c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80019d4:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <xTaskIncrementTick+0xfc>)
 80019d6:	681c      	ldr	r4, [r3, #0]
 80019d8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80019da:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80019dc:	b9bc      	cbnz	r4, 8001a0e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <xTaskIncrementTick+0x100>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	b142      	cbz	r2, 80019f8 <xTaskIncrementTick+0x30>
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	e7fe      	b.n	80019f6 <xTaskIncrementTick+0x2e>
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <xTaskIncrementTick+0x104>)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	6810      	ldr	r0, [r2, #0]
 80019fe:	6018      	str	r0, [r3, #0]
 8001a00:	6011      	str	r1, [r2, #0]
 8001a02:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <xTaskIncrementTick+0x108>)
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	f7ff fe71 	bl	80016f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a0e:	4d31      	ldr	r5, [pc, #196]	; (8001ad4 <xTaskIncrementTick+0x10c>)
 8001a10:	f04f 0b00 	mov.w	fp, #0
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	4f30      	ldr	r7, [pc, #192]	; (8001ad8 <xTaskIncrementTick+0x110>)
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d33e      	bcc.n	8001a9a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a1c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001ac8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001a20:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001ae8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a24:	f8d8 2000 	ldr.w	r2, [r8]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	bb72      	cbnz	r2, 8001a8a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	602a      	str	r2, [r5, #0]
					break;
 8001a32:	e032      	b.n	8001a9a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a34:	f106 0a04 	add.w	sl, r6, #4
 8001a38:	4650      	mov	r0, sl
 8001a3a:	f7ff fc40 	bl	80012be <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a3e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001a40:	b119      	cbz	r1, 8001a4a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a42:	f106 0018 	add.w	r0, r6, #24
 8001a46:	f7ff fc3a 	bl	80012be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f04f 0e14 	mov.w	lr, #20
 8001a50:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001a52:	f8d9 3000 	ldr.w	r3, [r9]
 8001a56:	fa02 f100 	lsl.w	r1, r2, r0
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <xTaskIncrementTick+0x114>)
 8001a5e:	f8c9 1000 	str.w	r1, [r9]
 8001a62:	fb0e 3000 	mla	r0, lr, r0, r3
 8001a66:	4651      	mov	r1, sl
 8001a68:	f7ff fc06 	bl	8001278 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001a70:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001a72:	4291      	cmp	r1, r2
 8001a74:	bf28      	it	cs
 8001a76:	f04f 0b01 	movcs.w	fp, #1
 8001a7a:	e7d3      	b.n	8001a24 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8001a7e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e011      	b.n	8001aae <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a8a:	f8d8 2000 	ldr.w	r2, [r8]
 8001a8e:	68d2      	ldr	r2, [r2, #12]
 8001a90:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a92:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001a94:	428c      	cmp	r4, r1
 8001a96:	d2cd      	bcs.n	8001a34 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001a98:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <xTaskIncrementTick+0x114>)
 8001a9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa0:	2214      	movs	r2, #20
 8001aa2:	434a      	muls	r2, r1
 8001aa4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001aa6:	2a02      	cmp	r2, #2
 8001aa8:	bf28      	it	cs
 8001aaa:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001aae:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <xTaskIncrementTick+0x11c>)
 8001ab0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	bf18      	it	ne
 8001ab6:	f04f 0b01 	movne.w	fp, #1
}
 8001aba:	4658      	mov	r0, fp
 8001abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac0:	20000d50 	.word	0x20000d50
 8001ac4:	20000dd0 	.word	0x20000dd0
 8001ac8:	20000cb0 	.word	0x20000cb0
 8001acc:	20000cb4 	.word	0x20000cb4
 8001ad0:	20000d8c 	.word	0x20000d8c
 8001ad4:	20000d88 	.word	0x20000d88
 8001ad8:	20000cac 	.word	0x20000cac
 8001adc:	20000cb8 	.word	0x20000cb8
 8001ae0:	20000d4c 	.word	0x20000d4c
 8001ae4:	20000dd4 	.word	0x20000dd4
 8001ae8:	20000d58 	.word	0x20000d58

08001aec <xTaskResumeAll>:
{
 8001aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001af0:	4c31      	ldr	r4, [pc, #196]	; (8001bb8 <xTaskResumeAll+0xcc>)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	b943      	cbnz	r3, 8001b08 <xTaskResumeAll+0x1c>
 8001af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	e7fe      	b.n	8001b06 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001b08:	f7ff fc3c 	bl	8001384 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b12:	6824      	ldr	r4, [r4, #0]
 8001b14:	b12c      	cbz	r4, 8001b22 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001b16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001b18:	f7ff fc56 	bl	80013c8 <vPortExitCritical>
}
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <xTaskResumeAll+0xd0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f5      	beq.n	8001b16 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b2a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001bd4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001b2e:	4f24      	ldr	r7, [pc, #144]	; (8001bc0 <xTaskResumeAll+0xd4>)
 8001b30:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001bd8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b34:	f8d9 3000 	ldr.w	r3, [r9]
 8001b38:	b9e3      	cbnz	r3, 8001b74 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001b3a:	b10c      	cbz	r4, 8001b40 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001b3c:	f7ff fdd8 	bl	80016f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001b40:	4d20      	ldr	r5, [pc, #128]	; (8001bc4 <xTaskResumeAll+0xd8>)
 8001b42:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001b44:	b144      	cbz	r4, 8001b58 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001b46:	2701      	movs	r7, #1
 8001b48:	4e1f      	ldr	r6, [pc, #124]	; (8001bc8 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001b4a:	f7ff ff3d 	bl	80019c8 <xTaskIncrementTick>
 8001b4e:	b100      	cbz	r0, 8001b52 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001b50:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001b52:	3c01      	subs	r4, #1
 8001b54:	d1f9      	bne.n	8001b4a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001b56:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <xTaskResumeAll+0xdc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0da      	beq.n	8001b16 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <xTaskResumeAll+0xe0>)
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001b70:	2401      	movs	r4, #1
 8001b72:	e7d1      	b.n	8001b18 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b74:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001b78:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b7a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b7c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b7e:	f104 0018 	add.w	r0, r4, #24
 8001b82:	f7ff fb9c 	bl	80012be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b86:	4630      	mov	r0, r6
 8001b88:	f7ff fb99 	bl	80012be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b8c:	2014      	movs	r0, #20
 8001b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	fa05 f302 	lsl.w	r3, r5, r2
 8001b96:	430b      	orrs	r3, r1
 8001b98:	fb00 8002 	mla	r0, r0, r2, r8
 8001b9c:	4631      	mov	r1, r6
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	f7ff fb6a 	bl	8001278 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <xTaskResumeAll+0xe4>)
 8001ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001bae:	bf24      	itt	cs
 8001bb0:	4b05      	ldrcs	r3, [pc, #20]	; (8001bc8 <xTaskResumeAll+0xdc>)
 8001bb2:	601d      	strcs	r5, [r3, #0]
 8001bb4:	e7be      	b.n	8001b34 <xTaskResumeAll+0x48>
 8001bb6:	bf00      	nop
 8001bb8:	20000d50 	.word	0x20000d50
 8001bbc:	20000d44 	.word	0x20000d44
 8001bc0:	20000d58 	.word	0x20000d58
 8001bc4:	20000d4c 	.word	0x20000d4c
 8001bc8:	20000dd4 	.word	0x20000dd4
 8001bcc:	e000ed04 	.word	0xe000ed04
 8001bd0:	20000cac 	.word	0x20000cac
 8001bd4:	20000d90 	.word	0x20000d90
 8001bd8:	20000cb8 	.word	0x20000cb8

08001bdc <vTaskDelay>:
	{
 8001bdc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001bde:	b940      	cbnz	r0, 8001bf2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <vTaskDelay+0x40>)
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <vTaskDelay+0x44>)
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	b141      	cbz	r1, 8001c0a <vTaskDelay+0x2e>
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	e7fe      	b.n	8001c08 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001c0a:	f7ff fed5 	bl	80019b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c0e:	f7ff fd81 	bl	8001714 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001c12:	f7ff ff6b 	bl	8001aec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d0e2      	beq.n	8001be0 <vTaskDelay+0x4>
 8001c1a:	bd08      	pop	{r3, pc}
 8001c1c:	e000ed04 	.word	0xe000ed04
 8001c20:	20000d50 	.word	0x20000d50

08001c24 <prvIdleTask>:
{
 8001c24:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c26:	4e17      	ldr	r6, [pc, #92]	; (8001c84 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c28:	4c17      	ldr	r4, [pc, #92]	; (8001c88 <prvIdleTask+0x64>)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	b963      	cbnz	r3, 8001c48 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <prvIdleTask+0x68>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d9f8      	bls.n	8001c28 <prvIdleTask+0x4>
				taskYIELD();
 8001c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <prvIdleTask+0x6c>)
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	e7ef      	b.n	8001c28 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001c48:	f7ff feb6 	bl	80019b8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c4c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001c4e:	f7ff ff4d 	bl	8001aec <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001c52:	2d00      	cmp	r5, #0
 8001c54:	d0e9      	beq.n	8001c2a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001c56:	f7ff fb95 	bl	8001384 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c5a:	68f3      	ldr	r3, [r6, #12]
 8001c5c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c5e:	1d28      	adds	r0, r5, #4
 8001c60:	f7ff fb2d 	bl	80012be <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <prvIdleTask+0x70>)
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001c72:	f7ff fba9 	bl	80013c8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001c76:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c78:	f7ff fd02 	bl	8001680 <vPortFree>
			vPortFree( pxTCB );
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f7ff fcff 	bl	8001680 <vPortFree>
 8001c82:	e7d2      	b.n	8001c2a <prvIdleTask+0x6>
 8001c84:	20000dbc 	.word	0x20000dbc
 8001c88:	20000d48 	.word	0x20000d48
 8001c8c:	20000cb8 	.word	0x20000cb8
 8001c90:	e000ed04 	.word	0xe000ed04
 8001c94:	20000d44 	.word	0x20000d44

08001c98 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <vTaskSwitchContext+0x60>)
{
 8001c9a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <vTaskSwitchContext+0x64>)
 8001ca0:	b112      	cbz	r2, 8001ca8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001ca2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001ca8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <vTaskSwitchContext+0x68>)
 8001cac:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	2214      	movs	r2, #20
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f1c3 031f 	rsb	r3, r3, #31
 8001cba:	435a      	muls	r2, r3
 8001cbc:	4911      	ldr	r1, [pc, #68]	; (8001d04 <vTaskSwitchContext+0x6c>)
 8001cbe:	588c      	ldr	r4, [r1, r2]
 8001cc0:	1888      	adds	r0, r1, r2
 8001cc2:	b944      	cbnz	r4, 8001cd6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	e7fe      	b.n	8001cd4 <vTaskSwitchContext+0x3c>
 8001cd6:	6844      	ldr	r4, [r0, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	6864      	ldr	r4, [r4, #4]
 8001cdc:	440a      	add	r2, r1
 8001cde:	4294      	cmp	r4, r2
 8001ce0:	bf08      	it	eq
 8001ce2:	6862      	ldreq	r2, [r4, #4]
 8001ce4:	6044      	str	r4, [r0, #4]
 8001ce6:	bf08      	it	eq
 8001ce8:	6042      	streq	r2, [r0, #4]
 8001cea:	2214      	movs	r2, #20
 8001cec:	fb02 1303 	mla	r3, r2, r3, r1
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <vTaskSwitchContext+0x70>)
 8001cf6:	e7d5      	b.n	8001ca4 <vTaskSwitchContext+0xc>
 8001cf8:	20000d50 	.word	0x20000d50
 8001cfc:	20000dd4 	.word	0x20000dd4
 8001d00:	20000d58 	.word	0x20000d58
 8001d04:	20000cb8 	.word	0x20000cb8
 8001d08:	20000cac 	.word	0x20000cac

08001d0c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d0c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  printf("\r\nWhat?\r\n");
 8001d0e:	4c04      	ldr	r4, [pc, #16]	; (8001d20 <StartDefaultTask+0x14>)
 8001d10:	4620      	mov	r0, r4
 8001d12:	f000 fab7 	bl	8002284 <puts>
    osDelay(5);
 8001d16:	2005      	movs	r0, #5
 8001d18:	f7ff fa98 	bl	800124c <osDelay>
 8001d1c:	e7f8      	b.n	8001d10 <StartDefaultTask+0x4>
 8001d1e:	bf00      	nop
 8001d20:	08002af9 	.word	0x08002af9

08001d24 <StartDefaultTask2>:
  }
  /* USER CODE END StartDefaultTask */
}

void StartDefaultTask2(void const * argument)
{
 8001d24:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  printf("\r\n Hello RTOS 2!\r\n");
 8001d26:	4c04      	ldr	r4, [pc, #16]	; (8001d38 <StartDefaultTask2+0x14>)
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f000 faab 	bl	8002284 <puts>
    osDelay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff fa8c 	bl	800124c <osDelay>
 8001d34:	e7f8      	b.n	8001d28 <StartDefaultTask2+0x4>
 8001d36:	bf00      	nop
 8001d38:	08002b02 	.word	0x08002b02

08001d3c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001d3c:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d3e:	4c0d      	ldr	r4, [pc, #52]	; (8001d74 <MX_FREERTOS_Init+0x38>)
void MX_FREERTOS_Init(void) {
 8001d40:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d42:	466d      	mov	r5, sp
 8001d44:	4626      	mov	r6, r4
 8001d46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4a:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4668      	mov	r0, sp
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d50:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d52:	f7ff fa62 	bl	800121a <osThreadCreate>
 8001d56:	4e08      	ldr	r6, [pc, #32]	; (8001d78 <MX_FREERTOS_Init+0x3c>)
  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8001d58:	ad05      	add	r5, sp, #20
 8001d5a:	3414      	adds	r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d5c:	6030      	str	r0, [r6, #0]
  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d62:	6823      	ldr	r3, [r4, #0]
    defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 8001d64:	2100      	movs	r1, #0
 8001d66:	a805      	add	r0, sp, #20
  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8001d68:	602b      	str	r3, [r5, #0]
    defaultTaskHandle = osThreadCreate(osThread(defaultTask2), NULL);
 8001d6a:	f7ff fa56 	bl	800121a <osThreadCreate>
 8001d6e:	6030      	str	r0, [r6, #0]
}
 8001d70:	b00a      	add	sp, #40	; 0x28
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	08002acc 	.word	0x08002acc
 8001d78:	20000de8 	.word	0x20000de8

08001d7c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	2210      	movs	r2, #16
{
 8001d7e:	b510      	push	{r4, lr}
 8001d80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	eb0d 0002 	add.w	r0, sp, r2
 8001d86:	2100      	movs	r1, #0
 8001d88:	f000 fa18 	bl	80021bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_GPIO_Init+0x70>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PB1_GPIO_Port, LED_PB1_Pin, GPIO_PIN_SET);
 8001d8e:	4c18      	ldr	r4, [pc, #96]	; (8001df0 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_PB1_GPIO_Port, LED_PB1_Pin, GPIO_PIN_SET);
 8001d92:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_PB1_GPIO_Port, LED_PB1_Pin, GPIO_PIN_SET);
 8001d9c:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9e:	f002 0220 	and.w	r2, r2, #32
 8001da2:	9201      	str	r2, [sp, #4]
 8001da4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	f042 0204 	orr.w	r2, r2, #4
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	f002 0204 	and.w	r2, r2, #4
 8001db4:	9202      	str	r2, [sp, #8]
 8001db6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_PB1_GPIO_Port, LED_PB1_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_PB1_GPIO_Port, LED_PB1_Pin, GPIO_PIN_SET);
 8001dcc:	f7fe fc00 	bl	80005d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = LED_PB1_Pin;
 8001dd2:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2200      	movs	r2, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_PB1_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	a904      	add	r1, sp, #16
 8001dda:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = LED_PB1_Pin;
 8001ddc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_PB1_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f7fe fb09 	bl	80003f8 <HAL_GPIO_Init>

}
 8001de6:	b008      	add	sp, #32
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010c00 	.word	0x40010c00

08001df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df4:	b510      	push	{r4, lr}
 8001df6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df8:	2228      	movs	r2, #40	; 0x28
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	a806      	add	r0, sp, #24
 8001dfe:	f000 f9dd 	bl	80021bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e02:	2100      	movs	r1, #0
 8001e04:	2214      	movs	r2, #20
 8001e06:	a801      	add	r0, sp, #4
 8001e08:	f000 f9d8 	bl	80021bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e10:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e12:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e14:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e16:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e22:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e24:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	f7fe fbd9 	bl	80005dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e30:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e32:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e34:	4621      	mov	r1, r4
 8001e36:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e3c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e40:	f7fe fd94 	bl	800096c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001e44:	b010      	add	sp, #64	; 0x40
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <main>:
{
 8001e48:	b508      	push	{r3, lr}
  HAL_Init();
 8001e4a:	f7fe f9f1 	bl	8000230 <HAL_Init>
  SystemClock_Config();
 8001e4e:	f7ff ffd1 	bl	8001df4 <SystemClock_Config>
  MX_GPIO_Init();
 8001e52:	f7ff ff93 	bl	8001d7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e56:	f000 f903 	bl	8002060 <MX_USART2_UART_Init>
  MX_FREERTOS_Init();
 8001e5a:	f7ff ff6f 	bl	8001d3c <MX_FREERTOS_Init>
  osKernelStart();
 8001e5e:	f7ff f9d7 	bl	8001210 <osKernelStart>
 8001e62:	e7fe      	b.n	8001e62 <main+0x1a>

08001e64 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8001e64:	b507      	push	{r0, r1, r2, lr}
 8001e66:	a902      	add	r1, sp, #8
 8001e68:	f841 0d04 	str.w	r0, [r1, #-4]!
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	2201      	movs	r2, #1
 8001e72:	4803      	ldr	r0, [pc, #12]	; (8001e80 <__io_putchar+0x1c>)
 8001e74:	f7ff f886 	bl	8000f84 <HAL_UART_Transmit>

  return ch;
}
 8001e78:	9801      	ldr	r0, [sp, #4]
 8001e7a:	b003      	add	sp, #12
 8001e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e80:	20000e2c 	.word	0x20000e2c

08001e84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001e84:	6802      	ldr	r2, [r0, #0]
 8001e86:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d101      	bne.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001e8c:	f7fe b9e2 	b.w	8000254 <HAL_IncTick>
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40001400 	.word	0x40001400

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_MspInit+0x50>)
{
 8001e9e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb0:	f002 0201 	and.w	r2, r2, #1
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ebe:	61da      	str	r2, [r3, #28]
 8001ec0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ecc:	f7fe f9e6 	bl	800029c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_MspInit+0x54>)
 8001ed2:	6853      	ldr	r3, [r2, #4]
 8001ed4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001ede:	6853      	ldr	r3, [r2, #4]
 8001ee0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ee4:	6053      	str	r3, [r2, #4]
  /* USER CODE END MspInit 1 */
}
 8001ee6:	b003      	add	sp, #12
 8001ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001ef6:	4601      	mov	r1, r0
{
 8001ef8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001efa:	2200      	movs	r2, #0
 8001efc:	2037      	movs	r0, #55	; 0x37
 8001efe:	f7fe f9cd 	bl	800029c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8001f02:	2037      	movs	r0, #55	; 0x37
 8001f04:	f7fe f9fe 	bl	8000304 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f0a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f0c:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f0e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f18:	4c11      	ldr	r4, [pc, #68]	; (8001f60 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f22:	f7fe fdf5 	bl	8000b10 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f26:	f7fe fdd3 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f2c:	0040      	lsls	r0, r0, #1
  htim7.Instance = TIM7;
 8001f2e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001f30:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f34:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_InitTick+0x74>)
 8001f38:	fbb0 f0f3 	udiv	r0, r0, r3
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 8001f3c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f3e:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f40:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f42:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8001f44:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f46:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f48:	f7fe fefe 	bl	8000d48 <HAL_TIM_Base_Init>
 8001f4c:	b920      	cbnz	r0, 8001f58 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7fe fdfd 	bl	8000b4e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001f54:	b008      	add	sp, #32
 8001f56:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7fb      	b.n	8001f54 <HAL_InitTick+0x60>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	20000dec 	.word	0x20000dec
 8001f64:	40001400 	.word	0x40001400
 8001f68:	000f4240 	.word	0x000f4240

08001f6c <NMI_Handler>:
 8001f6c:	4770      	bx	lr

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler>

08001f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f76:	4770      	bx	lr

08001f78 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f78:	4801      	ldr	r0, [pc, #4]	; (8001f80 <USART2_IRQHandler+0x8>)
 8001f7a:	f7ff b8a1 	b.w	80010c0 <HAL_UART_IRQHandler>
 8001f7e:	bf00      	nop
 8001f80:	20000e2c 	.word	0x20000e2c

08001f84 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f84:	4801      	ldr	r0, [pc, #4]	; (8001f8c <TIM7_IRQHandler+0x8>)
 8001f86:	f7fe bdf1 	b.w	8000b6c <HAL_TIM_IRQHandler>
 8001f8a:	bf00      	nop
 8001f8c:	20000dec 	.word	0x20000dec

08001f90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	460e      	mov	r6, r1
 8001f94:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	460c      	mov	r4, r1
 8001f98:	1ba3      	subs	r3, r4, r6
 8001f9a:	429d      	cmp	r5, r3
 8001f9c:	dc01      	bgt.n	8001fa2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001fa2:	f3af 8000 	nop.w
 8001fa6:	f804 0b01 	strb.w	r0, [r4], #1
 8001faa:	e7f5      	b.n	8001f98 <_read+0x8>

08001fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	460e      	mov	r6, r1
 8001fb0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	1ba3      	subs	r3, r4, r6
 8001fb6:	429d      	cmp	r5, r3
 8001fb8:	dc01      	bgt.n	8001fbe <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001fba:	4628      	mov	r0, r5
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001fbe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001fc2:	f7ff ff4f 	bl	8001e64 <__io_putchar>
 8001fc6:	e7f5      	b.n	8001fb4 <_write+0x8>

08001fc8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001fc8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <_sbrk+0x2c>)
{
 8001fcc:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	b909      	cbnz	r1, 8001fd6 <_sbrk+0xe>
		heap_end = &end;
 8001fd2:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <_sbrk+0x30>)
 8001fd4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001fd6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001fd8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001fda:	4402      	add	r2, r0
 8001fdc:	428a      	cmp	r2, r1
 8001fde:	d906      	bls.n	8001fee <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001fe0:	f000 f8c2 	bl	8002168 <__errno>
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001fee:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ff0:	bd08      	pop	{r3, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000dd8 	.word	0x20000dd8
 8001ff8:	20000e70 	.word	0x20000e70

08001ffc <_close>:

int _close(int file)
{
	return -1;
}
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002006:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002008:	604b      	str	r3, [r1, #4]
}
 800200a:	4770      	bx	lr

0800200c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800200c:	2001      	movs	r0, #1
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002010:	2000      	movs	r0, #0
 8002012:	4770      	bx	lr

08002014 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <SystemInit+0x40>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <SystemInit+0x44>)
 8002022:	400a      	ands	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800202c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002030:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002038:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002040:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002042:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002046:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002048:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <SystemInit+0x48>)
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	f8ff0000 	.word	0xf8ff0000
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002060:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002062:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8002066:	480a      	ldr	r0, [pc, #40]	; (8002090 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800206a:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 800206c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002070:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002072:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002074:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002076:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002078:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207e:	f7fe ff53 	bl	8000f28 <HAL_UART_Init>
 8002082:	b118      	cbz	r0, 800208c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002088:	f7ff bf06 	b.w	8001e98 <Error_Handler>
 800208c:	bd08      	pop	{r3, pc}
 800208e:	bf00      	nop
 8002090:	20000e2c 	.word	0x20000e2c
 8002094:	40004400 	.word	0x40004400

08002098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002098:	b510      	push	{r4, lr}
 800209a:	4604      	mov	r4, r0
 800209c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	2210      	movs	r2, #16
 80020a0:	2100      	movs	r1, #0
 80020a2:	a802      	add	r0, sp, #8
 80020a4:	f000 f88a 	bl	80021bc <memset>
  if(uartHandle->Instance==USART2)
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_UART_MspInit+0x7c>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d12f      	bne.n	8002110 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80020b4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020bc:	61da      	str	r2, [r3, #28]
 80020be:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	4815      	ldr	r0, [pc, #84]	; (8002118 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020cc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	f042 0204 	orr.w	r2, r2, #4
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020de:	2304      	movs	r3, #4
 80020e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f7fe f985 	bl	80003f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ee:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020f2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f7fe f97c 	bl	80003f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002100:	2026      	movs	r0, #38	; 0x26
 8002102:	4622      	mov	r2, r4
 8002104:	2105      	movs	r1, #5
 8002106:	f7fe f8c9 	bl	800029c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800210a:	2026      	movs	r0, #38	; 0x26
 800210c:	f7fe f8fa 	bl	8000304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002110:	b006      	add	sp, #24
 8002112:	bd10      	pop	{r4, pc}
 8002114:	40004400 	.word	0x40004400
 8002118:	40010800 	.word	0x40010800

0800211c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800211c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800211e:	e003      	b.n	8002128 <LoopCopyDataInit>

08002120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002126:	3104      	adds	r1, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002128:	480a      	ldr	r0, [pc, #40]	; (8002154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800212c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800212e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002130:	d3f6      	bcc.n	8002120 <CopyDataInit>
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002134:	e002      	b.n	800213c <LoopFillZerobss>

08002136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002138:	f842 3b04 	str.w	r3, [r2], #4

0800213c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800213e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002140:	d3f9      	bcc.n	8002136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002142:	f7ff ff67 	bl	8002014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002146:	f000 f815 	bl	8002174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214a:	f7ff fe7d 	bl	8001e48 <main>
  bx lr
 800214e:	4770      	bx	lr
  ldr r3, =_sidata
 8002150:	08002bb4 	.word	0x08002bb4
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002158:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800215c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002160:	20000e70 	.word	0x20000e70

08002164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC1_2_IRQHandler>
	...

08002168 <__errno>:
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <__errno+0x8>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	2000000c 	.word	0x2000000c

08002174 <__libc_init_array>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	2500      	movs	r5, #0
 8002178:	4e0c      	ldr	r6, [pc, #48]	; (80021ac <__libc_init_array+0x38>)
 800217a:	4c0d      	ldr	r4, [pc, #52]	; (80021b0 <__libc_init_array+0x3c>)
 800217c:	1ba4      	subs	r4, r4, r6
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	42a5      	cmp	r5, r4
 8002182:	d109      	bne.n	8002198 <__libc_init_array+0x24>
 8002184:	f000 fc8e 	bl	8002aa4 <_init>
 8002188:	2500      	movs	r5, #0
 800218a:	4e0a      	ldr	r6, [pc, #40]	; (80021b4 <__libc_init_array+0x40>)
 800218c:	4c0a      	ldr	r4, [pc, #40]	; (80021b8 <__libc_init_array+0x44>)
 800218e:	1ba4      	subs	r4, r4, r6
 8002190:	10a4      	asrs	r4, r4, #2
 8002192:	42a5      	cmp	r5, r4
 8002194:	d105      	bne.n	80021a2 <__libc_init_array+0x2e>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800219c:	4798      	blx	r3
 800219e:	3501      	adds	r5, #1
 80021a0:	e7ee      	b.n	8002180 <__libc_init_array+0xc>
 80021a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a6:	4798      	blx	r3
 80021a8:	3501      	adds	r5, #1
 80021aa:	e7f2      	b.n	8002192 <__libc_init_array+0x1e>
 80021ac:	08002bac 	.word	0x08002bac
 80021b0:	08002bac 	.word	0x08002bac
 80021b4:	08002bac 	.word	0x08002bac
 80021b8:	08002bb0 	.word	0x08002bb0

080021bc <memset>:
 80021bc:	4603      	mov	r3, r0
 80021be:	4402      	add	r2, r0
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <memset+0xa>
 80021c4:	4770      	bx	lr
 80021c6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ca:	e7f9      	b.n	80021c0 <memset+0x4>

080021cc <_puts_r>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	460e      	mov	r6, r1
 80021d0:	4605      	mov	r5, r0
 80021d2:	b118      	cbz	r0, 80021dc <_puts_r+0x10>
 80021d4:	6983      	ldr	r3, [r0, #24]
 80021d6:	b90b      	cbnz	r3, 80021dc <_puts_r+0x10>
 80021d8:	f000 fa0e 	bl	80025f8 <__sinit>
 80021dc:	69ab      	ldr	r3, [r5, #24]
 80021de:	68ac      	ldr	r4, [r5, #8]
 80021e0:	b913      	cbnz	r3, 80021e8 <_puts_r+0x1c>
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 fa08 	bl	80025f8 <__sinit>
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <_puts_r+0xac>)
 80021ea:	429c      	cmp	r4, r3
 80021ec:	d117      	bne.n	800221e <_puts_r+0x52>
 80021ee:	686c      	ldr	r4, [r5, #4]
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	071b      	lsls	r3, r3, #28
 80021f4:	d51d      	bpl.n	8002232 <_puts_r+0x66>
 80021f6:	6923      	ldr	r3, [r4, #16]
 80021f8:	b1db      	cbz	r3, 8002232 <_puts_r+0x66>
 80021fa:	3e01      	subs	r6, #1
 80021fc:	68a3      	ldr	r3, [r4, #8]
 80021fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002202:	3b01      	subs	r3, #1
 8002204:	60a3      	str	r3, [r4, #8]
 8002206:	b9e9      	cbnz	r1, 8002244 <_puts_r+0x78>
 8002208:	2b00      	cmp	r3, #0
 800220a:	da2e      	bge.n	800226a <_puts_r+0x9e>
 800220c:	4622      	mov	r2, r4
 800220e:	210a      	movs	r1, #10
 8002210:	4628      	mov	r0, r5
 8002212:	f000 f83f 	bl	8002294 <__swbuf_r>
 8002216:	3001      	adds	r0, #1
 8002218:	d011      	beq.n	800223e <_puts_r+0x72>
 800221a:	200a      	movs	r0, #10
 800221c:	bd70      	pop	{r4, r5, r6, pc}
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <_puts_r+0xb0>)
 8002220:	429c      	cmp	r4, r3
 8002222:	d101      	bne.n	8002228 <_puts_r+0x5c>
 8002224:	68ac      	ldr	r4, [r5, #8]
 8002226:	e7e3      	b.n	80021f0 <_puts_r+0x24>
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_puts_r+0xb4>)
 800222a:	429c      	cmp	r4, r3
 800222c:	bf08      	it	eq
 800222e:	68ec      	ldreq	r4, [r5, #12]
 8002230:	e7de      	b.n	80021f0 <_puts_r+0x24>
 8002232:	4621      	mov	r1, r4
 8002234:	4628      	mov	r0, r5
 8002236:	f000 f87f 	bl	8002338 <__swsetup_r>
 800223a:	2800      	cmp	r0, #0
 800223c:	d0dd      	beq.n	80021fa <_puts_r+0x2e>
 800223e:	f04f 30ff 	mov.w	r0, #4294967295
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	2b00      	cmp	r3, #0
 8002246:	da04      	bge.n	8002252 <_puts_r+0x86>
 8002248:	69a2      	ldr	r2, [r4, #24]
 800224a:	4293      	cmp	r3, r2
 800224c:	db06      	blt.n	800225c <_puts_r+0x90>
 800224e:	290a      	cmp	r1, #10
 8002250:	d004      	beq.n	800225c <_puts_r+0x90>
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	6022      	str	r2, [r4, #0]
 8002258:	7019      	strb	r1, [r3, #0]
 800225a:	e7cf      	b.n	80021fc <_puts_r+0x30>
 800225c:	4622      	mov	r2, r4
 800225e:	4628      	mov	r0, r5
 8002260:	f000 f818 	bl	8002294 <__swbuf_r>
 8002264:	3001      	adds	r0, #1
 8002266:	d1c9      	bne.n	80021fc <_puts_r+0x30>
 8002268:	e7e9      	b.n	800223e <_puts_r+0x72>
 800226a:	200a      	movs	r0, #10
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	6022      	str	r2, [r4, #0]
 8002272:	7018      	strb	r0, [r3, #0]
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	bf00      	nop
 8002278:	08002b6c 	.word	0x08002b6c
 800227c:	08002b8c 	.word	0x08002b8c
 8002280:	08002b4c 	.word	0x08002b4c

08002284 <puts>:
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <puts+0xc>)
 8002286:	4601      	mov	r1, r0
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	f7ff bf9f 	b.w	80021cc <_puts_r>
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c

08002294 <__swbuf_r>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	460e      	mov	r6, r1
 8002298:	4614      	mov	r4, r2
 800229a:	4605      	mov	r5, r0
 800229c:	b118      	cbz	r0, 80022a6 <__swbuf_r+0x12>
 800229e:	6983      	ldr	r3, [r0, #24]
 80022a0:	b90b      	cbnz	r3, 80022a6 <__swbuf_r+0x12>
 80022a2:	f000 f9a9 	bl	80025f8 <__sinit>
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <__swbuf_r+0x98>)
 80022a8:	429c      	cmp	r4, r3
 80022aa:	d12a      	bne.n	8002302 <__swbuf_r+0x6e>
 80022ac:	686c      	ldr	r4, [r5, #4]
 80022ae:	69a3      	ldr	r3, [r4, #24]
 80022b0:	60a3      	str	r3, [r4, #8]
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	071a      	lsls	r2, r3, #28
 80022b6:	d52e      	bpl.n	8002316 <__swbuf_r+0x82>
 80022b8:	6923      	ldr	r3, [r4, #16]
 80022ba:	b363      	cbz	r3, 8002316 <__swbuf_r+0x82>
 80022bc:	6923      	ldr	r3, [r4, #16]
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	b2f6      	uxtb	r6, r6
 80022c2:	1ac0      	subs	r0, r0, r3
 80022c4:	6963      	ldr	r3, [r4, #20]
 80022c6:	4637      	mov	r7, r6
 80022c8:	4298      	cmp	r0, r3
 80022ca:	db04      	blt.n	80022d6 <__swbuf_r+0x42>
 80022cc:	4621      	mov	r1, r4
 80022ce:	4628      	mov	r0, r5
 80022d0:	f000 f928 	bl	8002524 <_fflush_r>
 80022d4:	bb28      	cbnz	r0, 8002322 <__swbuf_r+0x8e>
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	3001      	adds	r0, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	60a3      	str	r3, [r4, #8]
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	6022      	str	r2, [r4, #0]
 80022e4:	701e      	strb	r6, [r3, #0]
 80022e6:	6963      	ldr	r3, [r4, #20]
 80022e8:	4298      	cmp	r0, r3
 80022ea:	d004      	beq.n	80022f6 <__swbuf_r+0x62>
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	07db      	lsls	r3, r3, #31
 80022f0:	d519      	bpl.n	8002326 <__swbuf_r+0x92>
 80022f2:	2e0a      	cmp	r6, #10
 80022f4:	d117      	bne.n	8002326 <__swbuf_r+0x92>
 80022f6:	4621      	mov	r1, r4
 80022f8:	4628      	mov	r0, r5
 80022fa:	f000 f913 	bl	8002524 <_fflush_r>
 80022fe:	b190      	cbz	r0, 8002326 <__swbuf_r+0x92>
 8002300:	e00f      	b.n	8002322 <__swbuf_r+0x8e>
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <__swbuf_r+0x9c>)
 8002304:	429c      	cmp	r4, r3
 8002306:	d101      	bne.n	800230c <__swbuf_r+0x78>
 8002308:	68ac      	ldr	r4, [r5, #8]
 800230a:	e7d0      	b.n	80022ae <__swbuf_r+0x1a>
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <__swbuf_r+0xa0>)
 800230e:	429c      	cmp	r4, r3
 8002310:	bf08      	it	eq
 8002312:	68ec      	ldreq	r4, [r5, #12]
 8002314:	e7cb      	b.n	80022ae <__swbuf_r+0x1a>
 8002316:	4621      	mov	r1, r4
 8002318:	4628      	mov	r0, r5
 800231a:	f000 f80d 	bl	8002338 <__swsetup_r>
 800231e:	2800      	cmp	r0, #0
 8002320:	d0cc      	beq.n	80022bc <__swbuf_r+0x28>
 8002322:	f04f 37ff 	mov.w	r7, #4294967295
 8002326:	4638      	mov	r0, r7
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232a:	bf00      	nop
 800232c:	08002b6c 	.word	0x08002b6c
 8002330:	08002b8c 	.word	0x08002b8c
 8002334:	08002b4c 	.word	0x08002b4c

08002338 <__swsetup_r>:
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <__swsetup_r+0xcc>)
 800233a:	b570      	push	{r4, r5, r6, lr}
 800233c:	681d      	ldr	r5, [r3, #0]
 800233e:	4606      	mov	r6, r0
 8002340:	460c      	mov	r4, r1
 8002342:	b125      	cbz	r5, 800234e <__swsetup_r+0x16>
 8002344:	69ab      	ldr	r3, [r5, #24]
 8002346:	b913      	cbnz	r3, 800234e <__swsetup_r+0x16>
 8002348:	4628      	mov	r0, r5
 800234a:	f000 f955 	bl	80025f8 <__sinit>
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <__swsetup_r+0xd0>)
 8002350:	429c      	cmp	r4, r3
 8002352:	d10f      	bne.n	8002374 <__swsetup_r+0x3c>
 8002354:	686c      	ldr	r4, [r5, #4]
 8002356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800235a:	b29a      	uxth	r2, r3
 800235c:	0715      	lsls	r5, r2, #28
 800235e:	d42c      	bmi.n	80023ba <__swsetup_r+0x82>
 8002360:	06d0      	lsls	r0, r2, #27
 8002362:	d411      	bmi.n	8002388 <__swsetup_r+0x50>
 8002364:	2209      	movs	r2, #9
 8002366:	6032      	str	r2, [r6, #0]
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	f04f 30ff 	mov.w	r0, #4294967295
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <__swsetup_r+0xd4>)
 8002376:	429c      	cmp	r4, r3
 8002378:	d101      	bne.n	800237e <__swsetup_r+0x46>
 800237a:	68ac      	ldr	r4, [r5, #8]
 800237c:	e7eb      	b.n	8002356 <__swsetup_r+0x1e>
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <__swsetup_r+0xd8>)
 8002380:	429c      	cmp	r4, r3
 8002382:	bf08      	it	eq
 8002384:	68ec      	ldreq	r4, [r5, #12]
 8002386:	e7e6      	b.n	8002356 <__swsetup_r+0x1e>
 8002388:	0751      	lsls	r1, r2, #29
 800238a:	d512      	bpl.n	80023b2 <__swsetup_r+0x7a>
 800238c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800238e:	b141      	cbz	r1, 80023a2 <__swsetup_r+0x6a>
 8002390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002394:	4299      	cmp	r1, r3
 8002396:	d002      	beq.n	800239e <__swsetup_r+0x66>
 8002398:	4630      	mov	r0, r6
 800239a:	f000 fa1b 	bl	80027d4 <_free_r>
 800239e:	2300      	movs	r3, #0
 80023a0:	6363      	str	r3, [r4, #52]	; 0x34
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023a8:	81a3      	strh	r3, [r4, #12]
 80023aa:	2300      	movs	r3, #0
 80023ac:	6063      	str	r3, [r4, #4]
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	89a3      	ldrh	r3, [r4, #12]
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	81a3      	strh	r3, [r4, #12]
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	b94b      	cbnz	r3, 80023d2 <__swsetup_r+0x9a>
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d003      	beq.n	80023d2 <__swsetup_r+0x9a>
 80023ca:	4621      	mov	r1, r4
 80023cc:	4630      	mov	r0, r6
 80023ce:	f000 f9c1 	bl	8002754 <__smakebuf_r>
 80023d2:	89a2      	ldrh	r2, [r4, #12]
 80023d4:	f012 0301 	ands.w	r3, r2, #1
 80023d8:	d00c      	beq.n	80023f4 <__swsetup_r+0xbc>
 80023da:	2300      	movs	r3, #0
 80023dc:	60a3      	str	r3, [r4, #8]
 80023de:	6963      	ldr	r3, [r4, #20]
 80023e0:	425b      	negs	r3, r3
 80023e2:	61a3      	str	r3, [r4, #24]
 80023e4:	6923      	ldr	r3, [r4, #16]
 80023e6:	b953      	cbnz	r3, 80023fe <__swsetup_r+0xc6>
 80023e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80023f0:	d1ba      	bne.n	8002368 <__swsetup_r+0x30>
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
 80023f4:	0792      	lsls	r2, r2, #30
 80023f6:	bf58      	it	pl
 80023f8:	6963      	ldrpl	r3, [r4, #20]
 80023fa:	60a3      	str	r3, [r4, #8]
 80023fc:	e7f2      	b.n	80023e4 <__swsetup_r+0xac>
 80023fe:	2000      	movs	r0, #0
 8002400:	e7f7      	b.n	80023f2 <__swsetup_r+0xba>
 8002402:	bf00      	nop
 8002404:	2000000c 	.word	0x2000000c
 8002408:	08002b6c 	.word	0x08002b6c
 800240c:	08002b8c 	.word	0x08002b8c
 8002410:	08002b4c 	.word	0x08002b4c

08002414 <__sflush_r>:
 8002414:	898a      	ldrh	r2, [r1, #12]
 8002416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241a:	4605      	mov	r5, r0
 800241c:	0710      	lsls	r0, r2, #28
 800241e:	460c      	mov	r4, r1
 8002420:	d45a      	bmi.n	80024d8 <__sflush_r+0xc4>
 8002422:	684b      	ldr	r3, [r1, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	dc05      	bgt.n	8002434 <__sflush_r+0x20>
 8002428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	dc02      	bgt.n	8002434 <__sflush_r+0x20>
 800242e:	2000      	movs	r0, #0
 8002430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002436:	2e00      	cmp	r6, #0
 8002438:	d0f9      	beq.n	800242e <__sflush_r+0x1a>
 800243a:	2300      	movs	r3, #0
 800243c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002440:	682f      	ldr	r7, [r5, #0]
 8002442:	602b      	str	r3, [r5, #0]
 8002444:	d033      	beq.n	80024ae <__sflush_r+0x9a>
 8002446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	075a      	lsls	r2, r3, #29
 800244c:	d505      	bpl.n	800245a <__sflush_r+0x46>
 800244e:	6863      	ldr	r3, [r4, #4]
 8002450:	1ac0      	subs	r0, r0, r3
 8002452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002454:	b10b      	cbz	r3, 800245a <__sflush_r+0x46>
 8002456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002458:	1ac0      	subs	r0, r0, r3
 800245a:	2300      	movs	r3, #0
 800245c:	4602      	mov	r2, r0
 800245e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002460:	6a21      	ldr	r1, [r4, #32]
 8002462:	4628      	mov	r0, r5
 8002464:	47b0      	blx	r6
 8002466:	1c43      	adds	r3, r0, #1
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	d106      	bne.n	800247a <__sflush_r+0x66>
 800246c:	6829      	ldr	r1, [r5, #0]
 800246e:	291d      	cmp	r1, #29
 8002470:	d84b      	bhi.n	800250a <__sflush_r+0xf6>
 8002472:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <__sflush_r+0x10c>)
 8002474:	40ca      	lsrs	r2, r1
 8002476:	07d6      	lsls	r6, r2, #31
 8002478:	d547      	bpl.n	800250a <__sflush_r+0xf6>
 800247a:	2200      	movs	r2, #0
 800247c:	6062      	str	r2, [r4, #4]
 800247e:	6922      	ldr	r2, [r4, #16]
 8002480:	04d9      	lsls	r1, r3, #19
 8002482:	6022      	str	r2, [r4, #0]
 8002484:	d504      	bpl.n	8002490 <__sflush_r+0x7c>
 8002486:	1c42      	adds	r2, r0, #1
 8002488:	d101      	bne.n	800248e <__sflush_r+0x7a>
 800248a:	682b      	ldr	r3, [r5, #0]
 800248c:	b903      	cbnz	r3, 8002490 <__sflush_r+0x7c>
 800248e:	6560      	str	r0, [r4, #84]	; 0x54
 8002490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002492:	602f      	str	r7, [r5, #0]
 8002494:	2900      	cmp	r1, #0
 8002496:	d0ca      	beq.n	800242e <__sflush_r+0x1a>
 8002498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800249c:	4299      	cmp	r1, r3
 800249e:	d002      	beq.n	80024a6 <__sflush_r+0x92>
 80024a0:	4628      	mov	r0, r5
 80024a2:	f000 f997 	bl	80027d4 <_free_r>
 80024a6:	2000      	movs	r0, #0
 80024a8:	6360      	str	r0, [r4, #52]	; 0x34
 80024aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024ae:	6a21      	ldr	r1, [r4, #32]
 80024b0:	2301      	movs	r3, #1
 80024b2:	4628      	mov	r0, r5
 80024b4:	47b0      	blx	r6
 80024b6:	1c41      	adds	r1, r0, #1
 80024b8:	d1c6      	bne.n	8002448 <__sflush_r+0x34>
 80024ba:	682b      	ldr	r3, [r5, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0c3      	beq.n	8002448 <__sflush_r+0x34>
 80024c0:	2b1d      	cmp	r3, #29
 80024c2:	d001      	beq.n	80024c8 <__sflush_r+0xb4>
 80024c4:	2b16      	cmp	r3, #22
 80024c6:	d101      	bne.n	80024cc <__sflush_r+0xb8>
 80024c8:	602f      	str	r7, [r5, #0]
 80024ca:	e7b0      	b.n	800242e <__sflush_r+0x1a>
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	81a3      	strh	r3, [r4, #12]
 80024d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d8:	690f      	ldr	r7, [r1, #16]
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d0a7      	beq.n	800242e <__sflush_r+0x1a>
 80024de:	0793      	lsls	r3, r2, #30
 80024e0:	bf18      	it	ne
 80024e2:	2300      	movne	r3, #0
 80024e4:	680e      	ldr	r6, [r1, #0]
 80024e6:	bf08      	it	eq
 80024e8:	694b      	ldreq	r3, [r1, #20]
 80024ea:	eba6 0807 	sub.w	r8, r6, r7
 80024ee:	600f      	str	r7, [r1, #0]
 80024f0:	608b      	str	r3, [r1, #8]
 80024f2:	f1b8 0f00 	cmp.w	r8, #0
 80024f6:	dd9a      	ble.n	800242e <__sflush_r+0x1a>
 80024f8:	4643      	mov	r3, r8
 80024fa:	463a      	mov	r2, r7
 80024fc:	6a21      	ldr	r1, [r4, #32]
 80024fe:	4628      	mov	r0, r5
 8002500:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002502:	47b0      	blx	r6
 8002504:	2800      	cmp	r0, #0
 8002506:	dc07      	bgt.n	8002518 <__sflush_r+0x104>
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002518:	4407      	add	r7, r0
 800251a:	eba8 0800 	sub.w	r8, r8, r0
 800251e:	e7e8      	b.n	80024f2 <__sflush_r+0xde>
 8002520:	20400001 	.word	0x20400001

08002524 <_fflush_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	690b      	ldr	r3, [r1, #16]
 8002528:	4605      	mov	r5, r0
 800252a:	460c      	mov	r4, r1
 800252c:	b1db      	cbz	r3, 8002566 <_fflush_r+0x42>
 800252e:	b118      	cbz	r0, 8002538 <_fflush_r+0x14>
 8002530:	6983      	ldr	r3, [r0, #24]
 8002532:	b90b      	cbnz	r3, 8002538 <_fflush_r+0x14>
 8002534:	f000 f860 	bl	80025f8 <__sinit>
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <_fflush_r+0x48>)
 800253a:	429c      	cmp	r4, r3
 800253c:	d109      	bne.n	8002552 <_fflush_r+0x2e>
 800253e:	686c      	ldr	r4, [r5, #4]
 8002540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002544:	b17b      	cbz	r3, 8002566 <_fflush_r+0x42>
 8002546:	4621      	mov	r1, r4
 8002548:	4628      	mov	r0, r5
 800254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800254e:	f7ff bf61 	b.w	8002414 <__sflush_r>
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <_fflush_r+0x4c>)
 8002554:	429c      	cmp	r4, r3
 8002556:	d101      	bne.n	800255c <_fflush_r+0x38>
 8002558:	68ac      	ldr	r4, [r5, #8]
 800255a:	e7f1      	b.n	8002540 <_fflush_r+0x1c>
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_fflush_r+0x50>)
 800255e:	429c      	cmp	r4, r3
 8002560:	bf08      	it	eq
 8002562:	68ec      	ldreq	r4, [r5, #12]
 8002564:	e7ec      	b.n	8002540 <_fflush_r+0x1c>
 8002566:	2000      	movs	r0, #0
 8002568:	bd38      	pop	{r3, r4, r5, pc}
 800256a:	bf00      	nop
 800256c:	08002b6c 	.word	0x08002b6c
 8002570:	08002b8c 	.word	0x08002b8c
 8002574:	08002b4c 	.word	0x08002b4c

08002578 <_cleanup_r>:
 8002578:	4901      	ldr	r1, [pc, #4]	; (8002580 <_cleanup_r+0x8>)
 800257a:	f000 b8a9 	b.w	80026d0 <_fwalk_reent>
 800257e:	bf00      	nop
 8002580:	08002525 	.word	0x08002525

08002584 <std.isra.0>:
 8002584:	2300      	movs	r3, #0
 8002586:	b510      	push	{r4, lr}
 8002588:	4604      	mov	r4, r0
 800258a:	6003      	str	r3, [r0, #0]
 800258c:	6043      	str	r3, [r0, #4]
 800258e:	6083      	str	r3, [r0, #8]
 8002590:	8181      	strh	r1, [r0, #12]
 8002592:	6643      	str	r3, [r0, #100]	; 0x64
 8002594:	81c2      	strh	r2, [r0, #14]
 8002596:	6103      	str	r3, [r0, #16]
 8002598:	6143      	str	r3, [r0, #20]
 800259a:	6183      	str	r3, [r0, #24]
 800259c:	4619      	mov	r1, r3
 800259e:	2208      	movs	r2, #8
 80025a0:	305c      	adds	r0, #92	; 0x5c
 80025a2:	f7ff fe0b 	bl	80021bc <memset>
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <std.isra.0+0x38>)
 80025a8:	6224      	str	r4, [r4, #32]
 80025aa:	6263      	str	r3, [r4, #36]	; 0x24
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <std.isra.0+0x3c>)
 80025ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <std.isra.0+0x40>)
 80025b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <std.isra.0+0x44>)
 80025b6:	6323      	str	r3, [r4, #48]	; 0x30
 80025b8:	bd10      	pop	{r4, pc}
 80025ba:	bf00      	nop
 80025bc:	08002949 	.word	0x08002949
 80025c0:	0800296b 	.word	0x0800296b
 80025c4:	080029a3 	.word	0x080029a3
 80025c8:	080029c7 	.word	0x080029c7

080025cc <__sfmoreglue>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	2568      	movs	r5, #104	; 0x68
 80025d0:	1e4a      	subs	r2, r1, #1
 80025d2:	4355      	muls	r5, r2
 80025d4:	460e      	mov	r6, r1
 80025d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025da:	f000 f947 	bl	800286c <_malloc_r>
 80025de:	4604      	mov	r4, r0
 80025e0:	b140      	cbz	r0, 80025f4 <__sfmoreglue+0x28>
 80025e2:	2100      	movs	r1, #0
 80025e4:	e880 0042 	stmia.w	r0, {r1, r6}
 80025e8:	300c      	adds	r0, #12
 80025ea:	60a0      	str	r0, [r4, #8]
 80025ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025f0:	f7ff fde4 	bl	80021bc <memset>
 80025f4:	4620      	mov	r0, r4
 80025f6:	bd70      	pop	{r4, r5, r6, pc}

080025f8 <__sinit>:
 80025f8:	6983      	ldr	r3, [r0, #24]
 80025fa:	b510      	push	{r4, lr}
 80025fc:	4604      	mov	r4, r0
 80025fe:	bb33      	cbnz	r3, 800264e <__sinit+0x56>
 8002600:	6483      	str	r3, [r0, #72]	; 0x48
 8002602:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002604:	6503      	str	r3, [r0, #80]	; 0x50
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <__sinit+0x58>)
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <__sinit+0x5c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6282      	str	r2, [r0, #40]	; 0x28
 800260e:	4298      	cmp	r0, r3
 8002610:	bf04      	itt	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	6183      	streq	r3, [r0, #24]
 8002616:	f000 f81f 	bl	8002658 <__sfp>
 800261a:	6060      	str	r0, [r4, #4]
 800261c:	4620      	mov	r0, r4
 800261e:	f000 f81b 	bl	8002658 <__sfp>
 8002622:	60a0      	str	r0, [r4, #8]
 8002624:	4620      	mov	r0, r4
 8002626:	f000 f817 	bl	8002658 <__sfp>
 800262a:	2200      	movs	r2, #0
 800262c:	60e0      	str	r0, [r4, #12]
 800262e:	2104      	movs	r1, #4
 8002630:	6860      	ldr	r0, [r4, #4]
 8002632:	f7ff ffa7 	bl	8002584 <std.isra.0>
 8002636:	2201      	movs	r2, #1
 8002638:	2109      	movs	r1, #9
 800263a:	68a0      	ldr	r0, [r4, #8]
 800263c:	f7ff ffa2 	bl	8002584 <std.isra.0>
 8002640:	2202      	movs	r2, #2
 8002642:	2112      	movs	r1, #18
 8002644:	68e0      	ldr	r0, [r4, #12]
 8002646:	f7ff ff9d 	bl	8002584 <std.isra.0>
 800264a:	2301      	movs	r3, #1
 800264c:	61a3      	str	r3, [r4, #24]
 800264e:	bd10      	pop	{r4, pc}
 8002650:	08002b48 	.word	0x08002b48
 8002654:	08002579 	.word	0x08002579

08002658 <__sfp>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <__sfp+0x74>)
 800265c:	4607      	mov	r7, r0
 800265e:	681e      	ldr	r6, [r3, #0]
 8002660:	69b3      	ldr	r3, [r6, #24]
 8002662:	b913      	cbnz	r3, 800266a <__sfp+0x12>
 8002664:	4630      	mov	r0, r6
 8002666:	f7ff ffc7 	bl	80025f8 <__sinit>
 800266a:	3648      	adds	r6, #72	; 0x48
 800266c:	68b4      	ldr	r4, [r6, #8]
 800266e:	6873      	ldr	r3, [r6, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	d503      	bpl.n	800267c <__sfp+0x24>
 8002674:	6833      	ldr	r3, [r6, #0]
 8002676:	b133      	cbz	r3, 8002686 <__sfp+0x2e>
 8002678:	6836      	ldr	r6, [r6, #0]
 800267a:	e7f7      	b.n	800266c <__sfp+0x14>
 800267c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002680:	b16d      	cbz	r5, 800269e <__sfp+0x46>
 8002682:	3468      	adds	r4, #104	; 0x68
 8002684:	e7f4      	b.n	8002670 <__sfp+0x18>
 8002686:	2104      	movs	r1, #4
 8002688:	4638      	mov	r0, r7
 800268a:	f7ff ff9f 	bl	80025cc <__sfmoreglue>
 800268e:	6030      	str	r0, [r6, #0]
 8002690:	2800      	cmp	r0, #0
 8002692:	d1f1      	bne.n	8002678 <__sfp+0x20>
 8002694:	230c      	movs	r3, #12
 8002696:	4604      	mov	r4, r0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4620      	mov	r0, r4
 800269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a2:	81e3      	strh	r3, [r4, #14]
 80026a4:	2301      	movs	r3, #1
 80026a6:	6665      	str	r5, [r4, #100]	; 0x64
 80026a8:	81a3      	strh	r3, [r4, #12]
 80026aa:	6025      	str	r5, [r4, #0]
 80026ac:	60a5      	str	r5, [r4, #8]
 80026ae:	6065      	str	r5, [r4, #4]
 80026b0:	6125      	str	r5, [r4, #16]
 80026b2:	6165      	str	r5, [r4, #20]
 80026b4:	61a5      	str	r5, [r4, #24]
 80026b6:	2208      	movs	r2, #8
 80026b8:	4629      	mov	r1, r5
 80026ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026be:	f7ff fd7d 	bl	80021bc <memset>
 80026c2:	6365      	str	r5, [r4, #52]	; 0x34
 80026c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80026c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80026c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80026ca:	e7e6      	b.n	800269a <__sfp+0x42>
 80026cc:	08002b48 	.word	0x08002b48

080026d0 <_fwalk_reent>:
 80026d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d4:	4680      	mov	r8, r0
 80026d6:	4689      	mov	r9, r1
 80026d8:	2600      	movs	r6, #0
 80026da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026de:	b914      	cbnz	r4, 80026e6 <_fwalk_reent+0x16>
 80026e0:	4630      	mov	r0, r6
 80026e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026e6:	68a5      	ldr	r5, [r4, #8]
 80026e8:	6867      	ldr	r7, [r4, #4]
 80026ea:	3f01      	subs	r7, #1
 80026ec:	d501      	bpl.n	80026f2 <_fwalk_reent+0x22>
 80026ee:	6824      	ldr	r4, [r4, #0]
 80026f0:	e7f5      	b.n	80026de <_fwalk_reent+0xe>
 80026f2:	89ab      	ldrh	r3, [r5, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d907      	bls.n	8002708 <_fwalk_reent+0x38>
 80026f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026fc:	3301      	adds	r3, #1
 80026fe:	d003      	beq.n	8002708 <_fwalk_reent+0x38>
 8002700:	4629      	mov	r1, r5
 8002702:	4640      	mov	r0, r8
 8002704:	47c8      	blx	r9
 8002706:	4306      	orrs	r6, r0
 8002708:	3568      	adds	r5, #104	; 0x68
 800270a:	e7ee      	b.n	80026ea <_fwalk_reent+0x1a>

0800270c <__swhatbuf_r>:
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	460e      	mov	r6, r1
 8002710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002714:	b090      	sub	sp, #64	; 0x40
 8002716:	2900      	cmp	r1, #0
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	da07      	bge.n	800272e <__swhatbuf_r+0x22>
 800271e:	2300      	movs	r3, #0
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	89b3      	ldrh	r3, [r6, #12]
 8002724:	061a      	lsls	r2, r3, #24
 8002726:	d410      	bmi.n	800274a <__swhatbuf_r+0x3e>
 8002728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272c:	e00e      	b.n	800274c <__swhatbuf_r+0x40>
 800272e:	aa01      	add	r2, sp, #4
 8002730:	f000 f970 	bl	8002a14 <_fstat_r>
 8002734:	2800      	cmp	r0, #0
 8002736:	dbf2      	blt.n	800271e <__swhatbuf_r+0x12>
 8002738:	9a02      	ldr	r2, [sp, #8]
 800273a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800273e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002742:	425a      	negs	r2, r3
 8002744:	415a      	adcs	r2, r3
 8002746:	602a      	str	r2, [r5, #0]
 8002748:	e7ee      	b.n	8002728 <__swhatbuf_r+0x1c>
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	2000      	movs	r0, #0
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	b010      	add	sp, #64	; 0x40
 8002752:	bd70      	pop	{r4, r5, r6, pc}

08002754 <__smakebuf_r>:
 8002754:	898b      	ldrh	r3, [r1, #12]
 8002756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002758:	079d      	lsls	r5, r3, #30
 800275a:	4606      	mov	r6, r0
 800275c:	460c      	mov	r4, r1
 800275e:	d507      	bpl.n	8002770 <__smakebuf_r+0x1c>
 8002760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	6123      	str	r3, [r4, #16]
 8002768:	2301      	movs	r3, #1
 800276a:	6163      	str	r3, [r4, #20]
 800276c:	b002      	add	sp, #8
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	ab01      	add	r3, sp, #4
 8002772:	466a      	mov	r2, sp
 8002774:	f7ff ffca 	bl	800270c <__swhatbuf_r>
 8002778:	9900      	ldr	r1, [sp, #0]
 800277a:	4605      	mov	r5, r0
 800277c:	4630      	mov	r0, r6
 800277e:	f000 f875 	bl	800286c <_malloc_r>
 8002782:	b948      	cbnz	r0, 8002798 <__smakebuf_r+0x44>
 8002784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002788:	059a      	lsls	r2, r3, #22
 800278a:	d4ef      	bmi.n	800276c <__smakebuf_r+0x18>
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	81a3      	strh	r3, [r4, #12]
 8002796:	e7e3      	b.n	8002760 <__smakebuf_r+0xc>
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <__smakebuf_r+0x7c>)
 800279a:	62b3      	str	r3, [r6, #40]	; 0x28
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	6020      	str	r0, [r4, #0]
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	81a3      	strh	r3, [r4, #12]
 80027a6:	9b00      	ldr	r3, [sp, #0]
 80027a8:	6120      	str	r0, [r4, #16]
 80027aa:	6163      	str	r3, [r4, #20]
 80027ac:	9b01      	ldr	r3, [sp, #4]
 80027ae:	b15b      	cbz	r3, 80027c8 <__smakebuf_r+0x74>
 80027b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027b4:	4630      	mov	r0, r6
 80027b6:	f000 f93f 	bl	8002a38 <_isatty_r>
 80027ba:	b128      	cbz	r0, 80027c8 <__smakebuf_r+0x74>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	431d      	orrs	r5, r3
 80027cc:	81a5      	strh	r5, [r4, #12]
 80027ce:	e7cd      	b.n	800276c <__smakebuf_r+0x18>
 80027d0:	08002579 	.word	0x08002579

080027d4 <_free_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4605      	mov	r5, r0
 80027d8:	2900      	cmp	r1, #0
 80027da:	d043      	beq.n	8002864 <_free_r+0x90>
 80027dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e0:	1f0c      	subs	r4, r1, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfb8      	it	lt
 80027e6:	18e4      	addlt	r4, r4, r3
 80027e8:	f000 f948 	bl	8002a7c <__malloc_lock>
 80027ec:	4a1e      	ldr	r2, [pc, #120]	; (8002868 <_free_r+0x94>)
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	4610      	mov	r0, r2
 80027f2:	b933      	cbnz	r3, 8002802 <_free_r+0x2e>
 80027f4:	6063      	str	r3, [r4, #4]
 80027f6:	6014      	str	r4, [r2, #0]
 80027f8:	4628      	mov	r0, r5
 80027fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027fe:	f000 b93e 	b.w	8002a7e <__malloc_unlock>
 8002802:	42a3      	cmp	r3, r4
 8002804:	d90b      	bls.n	800281e <_free_r+0x4a>
 8002806:	6821      	ldr	r1, [r4, #0]
 8002808:	1862      	adds	r2, r4, r1
 800280a:	4293      	cmp	r3, r2
 800280c:	bf01      	itttt	eq
 800280e:	681a      	ldreq	r2, [r3, #0]
 8002810:	685b      	ldreq	r3, [r3, #4]
 8002812:	1852      	addeq	r2, r2, r1
 8002814:	6022      	streq	r2, [r4, #0]
 8002816:	6063      	str	r3, [r4, #4]
 8002818:	6004      	str	r4, [r0, #0]
 800281a:	e7ed      	b.n	80027f8 <_free_r+0x24>
 800281c:	4613      	mov	r3, r2
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	b10a      	cbz	r2, 8002826 <_free_r+0x52>
 8002822:	42a2      	cmp	r2, r4
 8002824:	d9fa      	bls.n	800281c <_free_r+0x48>
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	1858      	adds	r0, r3, r1
 800282a:	42a0      	cmp	r0, r4
 800282c:	d10b      	bne.n	8002846 <_free_r+0x72>
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	4401      	add	r1, r0
 8002832:	1858      	adds	r0, r3, r1
 8002834:	4282      	cmp	r2, r0
 8002836:	6019      	str	r1, [r3, #0]
 8002838:	d1de      	bne.n	80027f8 <_free_r+0x24>
 800283a:	6810      	ldr	r0, [r2, #0]
 800283c:	6852      	ldr	r2, [r2, #4]
 800283e:	4401      	add	r1, r0
 8002840:	6019      	str	r1, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e7d8      	b.n	80027f8 <_free_r+0x24>
 8002846:	d902      	bls.n	800284e <_free_r+0x7a>
 8002848:	230c      	movs	r3, #12
 800284a:	602b      	str	r3, [r5, #0]
 800284c:	e7d4      	b.n	80027f8 <_free_r+0x24>
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	1821      	adds	r1, r4, r0
 8002852:	428a      	cmp	r2, r1
 8002854:	bf01      	itttt	eq
 8002856:	6811      	ldreq	r1, [r2, #0]
 8002858:	6852      	ldreq	r2, [r2, #4]
 800285a:	1809      	addeq	r1, r1, r0
 800285c:	6021      	streq	r1, [r4, #0]
 800285e:	6062      	str	r2, [r4, #4]
 8002860:	605c      	str	r4, [r3, #4]
 8002862:	e7c9      	b.n	80027f8 <_free_r+0x24>
 8002864:	bd38      	pop	{r3, r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	20000ddc 	.word	0x20000ddc

0800286c <_malloc_r>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	1ccd      	adds	r5, r1, #3
 8002870:	f025 0503 	bic.w	r5, r5, #3
 8002874:	3508      	adds	r5, #8
 8002876:	2d0c      	cmp	r5, #12
 8002878:	bf38      	it	cc
 800287a:	250c      	movcc	r5, #12
 800287c:	2d00      	cmp	r5, #0
 800287e:	4606      	mov	r6, r0
 8002880:	db01      	blt.n	8002886 <_malloc_r+0x1a>
 8002882:	42a9      	cmp	r1, r5
 8002884:	d903      	bls.n	800288e <_malloc_r+0x22>
 8002886:	230c      	movs	r3, #12
 8002888:	6033      	str	r3, [r6, #0]
 800288a:	2000      	movs	r0, #0
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	f000 f8f5 	bl	8002a7c <__malloc_lock>
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <_malloc_r+0xb4>)
 8002894:	6814      	ldr	r4, [r2, #0]
 8002896:	4621      	mov	r1, r4
 8002898:	b991      	cbnz	r1, 80028c0 <_malloc_r+0x54>
 800289a:	4c22      	ldr	r4, [pc, #136]	; (8002924 <_malloc_r+0xb8>)
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	b91b      	cbnz	r3, 80028a8 <_malloc_r+0x3c>
 80028a0:	4630      	mov	r0, r6
 80028a2:	f000 f841 	bl	8002928 <_sbrk_r>
 80028a6:	6020      	str	r0, [r4, #0]
 80028a8:	4629      	mov	r1, r5
 80028aa:	4630      	mov	r0, r6
 80028ac:	f000 f83c 	bl	8002928 <_sbrk_r>
 80028b0:	1c43      	adds	r3, r0, #1
 80028b2:	d126      	bne.n	8002902 <_malloc_r+0x96>
 80028b4:	230c      	movs	r3, #12
 80028b6:	4630      	mov	r0, r6
 80028b8:	6033      	str	r3, [r6, #0]
 80028ba:	f000 f8e0 	bl	8002a7e <__malloc_unlock>
 80028be:	e7e4      	b.n	800288a <_malloc_r+0x1e>
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	1b5b      	subs	r3, r3, r5
 80028c4:	d41a      	bmi.n	80028fc <_malloc_r+0x90>
 80028c6:	2b0b      	cmp	r3, #11
 80028c8:	d90f      	bls.n	80028ea <_malloc_r+0x7e>
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	18cc      	adds	r4, r1, r3
 80028ce:	50cd      	str	r5, [r1, r3]
 80028d0:	4630      	mov	r0, r6
 80028d2:	f000 f8d4 	bl	8002a7e <__malloc_unlock>
 80028d6:	f104 000b 	add.w	r0, r4, #11
 80028da:	1d23      	adds	r3, r4, #4
 80028dc:	f020 0007 	bic.w	r0, r0, #7
 80028e0:	1ac3      	subs	r3, r0, r3
 80028e2:	d01b      	beq.n	800291c <_malloc_r+0xb0>
 80028e4:	425a      	negs	r2, r3
 80028e6:	50e2      	str	r2, [r4, r3]
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
 80028ea:	428c      	cmp	r4, r1
 80028ec:	bf0b      	itete	eq
 80028ee:	6863      	ldreq	r3, [r4, #4]
 80028f0:	684b      	ldrne	r3, [r1, #4]
 80028f2:	6013      	streq	r3, [r2, #0]
 80028f4:	6063      	strne	r3, [r4, #4]
 80028f6:	bf18      	it	ne
 80028f8:	460c      	movne	r4, r1
 80028fa:	e7e9      	b.n	80028d0 <_malloc_r+0x64>
 80028fc:	460c      	mov	r4, r1
 80028fe:	6849      	ldr	r1, [r1, #4]
 8002900:	e7ca      	b.n	8002898 <_malloc_r+0x2c>
 8002902:	1cc4      	adds	r4, r0, #3
 8002904:	f024 0403 	bic.w	r4, r4, #3
 8002908:	42a0      	cmp	r0, r4
 800290a:	d005      	beq.n	8002918 <_malloc_r+0xac>
 800290c:	1a21      	subs	r1, r4, r0
 800290e:	4630      	mov	r0, r6
 8002910:	f000 f80a 	bl	8002928 <_sbrk_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d0cd      	beq.n	80028b4 <_malloc_r+0x48>
 8002918:	6025      	str	r5, [r4, #0]
 800291a:	e7d9      	b.n	80028d0 <_malloc_r+0x64>
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	bf00      	nop
 8002920:	20000ddc 	.word	0x20000ddc
 8002924:	20000de0 	.word	0x20000de0

08002928 <_sbrk_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	2300      	movs	r3, #0
 800292c:	4c05      	ldr	r4, [pc, #20]	; (8002944 <_sbrk_r+0x1c>)
 800292e:	4605      	mov	r5, r0
 8002930:	4608      	mov	r0, r1
 8002932:	6023      	str	r3, [r4, #0]
 8002934:	f7ff fb48 	bl	8001fc8 <_sbrk>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_sbrk_r+0x1a>
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	b103      	cbz	r3, 8002942 <_sbrk_r+0x1a>
 8002940:	602b      	str	r3, [r5, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	20000e6c 	.word	0x20000e6c

08002948 <__sread>:
 8002948:	b510      	push	{r4, lr}
 800294a:	460c      	mov	r4, r1
 800294c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002950:	f000 f896 	bl	8002a80 <_read_r>
 8002954:	2800      	cmp	r0, #0
 8002956:	bfab      	itete	ge
 8002958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800295a:	89a3      	ldrhlt	r3, [r4, #12]
 800295c:	181b      	addge	r3, r3, r0
 800295e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002962:	bfac      	ite	ge
 8002964:	6563      	strge	r3, [r4, #84]	; 0x54
 8002966:	81a3      	strhlt	r3, [r4, #12]
 8002968:	bd10      	pop	{r4, pc}

0800296a <__swrite>:
 800296a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296e:	461f      	mov	r7, r3
 8002970:	898b      	ldrh	r3, [r1, #12]
 8002972:	4605      	mov	r5, r0
 8002974:	05db      	lsls	r3, r3, #23
 8002976:	460c      	mov	r4, r1
 8002978:	4616      	mov	r6, r2
 800297a:	d505      	bpl.n	8002988 <__swrite+0x1e>
 800297c:	2302      	movs	r3, #2
 800297e:	2200      	movs	r2, #0
 8002980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002984:	f000 f868 	bl	8002a58 <_lseek_r>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	4632      	mov	r2, r6
 800298c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002990:	81a3      	strh	r3, [r4, #12]
 8002992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002996:	463b      	mov	r3, r7
 8002998:	4628      	mov	r0, r5
 800299a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	f000 b817 	b.w	80029d0 <_write_r>

080029a2 <__sseek>:
 80029a2:	b510      	push	{r4, lr}
 80029a4:	460c      	mov	r4, r1
 80029a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029aa:	f000 f855 	bl	8002a58 <_lseek_r>
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	bf15      	itete	ne
 80029b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80029b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029be:	81a3      	strheq	r3, [r4, #12]
 80029c0:	bf18      	it	ne
 80029c2:	81a3      	strhne	r3, [r4, #12]
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <__sclose>:
 80029c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ca:	f000 b813 	b.w	80029f4 <_close_r>
	...

080029d0 <_write_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4605      	mov	r5, r0
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	2200      	movs	r2, #0
 80029da:	4c05      	ldr	r4, [pc, #20]	; (80029f0 <_write_r+0x20>)
 80029dc:	6022      	str	r2, [r4, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff fae4 	bl	8001fac <_write>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_write_r+0x1e>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_write_r+0x1e>
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	20000e6c 	.word	0x20000e6c

080029f4 <_close_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	2300      	movs	r3, #0
 80029f8:	4c05      	ldr	r4, [pc, #20]	; (8002a10 <_close_r+0x1c>)
 80029fa:	4605      	mov	r5, r0
 80029fc:	4608      	mov	r0, r1
 80029fe:	6023      	str	r3, [r4, #0]
 8002a00:	f7ff fafc 	bl	8001ffc <_close>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_close_r+0x1a>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_close_r+0x1a>
 8002a0c:	602b      	str	r3, [r5, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	20000e6c 	.word	0x20000e6c

08002a14 <_fstat_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	2300      	movs	r3, #0
 8002a18:	4c06      	ldr	r4, [pc, #24]	; (8002a34 <_fstat_r+0x20>)
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	6023      	str	r3, [r4, #0]
 8002a22:	f7ff faee 	bl	8002002 <_fstat>
 8002a26:	1c43      	adds	r3, r0, #1
 8002a28:	d102      	bne.n	8002a30 <_fstat_r+0x1c>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	b103      	cbz	r3, 8002a30 <_fstat_r+0x1c>
 8002a2e:	602b      	str	r3, [r5, #0]
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
 8002a32:	bf00      	nop
 8002a34:	20000e6c 	.word	0x20000e6c

08002a38 <_isatty_r>:
 8002a38:	b538      	push	{r3, r4, r5, lr}
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	4c05      	ldr	r4, [pc, #20]	; (8002a54 <_isatty_r+0x1c>)
 8002a3e:	4605      	mov	r5, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	f7ff fae2 	bl	800200c <_isatty>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	d102      	bne.n	8002a52 <_isatty_r+0x1a>
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	b103      	cbz	r3, 8002a52 <_isatty_r+0x1a>
 8002a50:	602b      	str	r3, [r5, #0]
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
 8002a54:	20000e6c 	.word	0x20000e6c

08002a58 <_lseek_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	2200      	movs	r2, #0
 8002a62:	4c05      	ldr	r4, [pc, #20]	; (8002a78 <_lseek_r+0x20>)
 8002a64:	6022      	str	r2, [r4, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fad2 	bl	8002010 <_lseek>
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	d102      	bne.n	8002a76 <_lseek_r+0x1e>
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	b103      	cbz	r3, 8002a76 <_lseek_r+0x1e>
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	20000e6c 	.word	0x20000e6c

08002a7c <__malloc_lock>:
 8002a7c:	4770      	bx	lr

08002a7e <__malloc_unlock>:
 8002a7e:	4770      	bx	lr

08002a80 <_read_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4605      	mov	r5, r0
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4c05      	ldr	r4, [pc, #20]	; (8002aa0 <_read_r+0x20>)
 8002a8c:	6022      	str	r2, [r4, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff fa7e 	bl	8001f90 <_read>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_read_r+0x1e>
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_read_r+0x1e>
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	20000e6c 	.word	0x20000e6c

08002aa4 <_init>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr

08002ab0 <_fini>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr
